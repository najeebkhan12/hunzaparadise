public without sharing class EmailClientController {
    // Class private variables
    public boolean isPEorGE {get;set;}
    private final string SEMI_COLON = ';';
    private final string HTML_BREAK = '<br>';
    private final string HTML_BLANK_P = '<p>&nbsp;</p>';
    private final string CR_LF = '\r\n';
    private final integer MaximumAttachmentsSizeInBytes = 5 * (1024 * 1024);
    private final Set < string > RELATED_STDOBJ_PREFIX = new Set < string > {
        '001',
        '02i',
        '701',
        '500',
        '800',
        '006',
        '01t',
        '501',
        '00Q',
        '003',
        '0WO',
        '1WL',
        '0Q0'
    };
    private static string LEAD_OBJECT_PREFIX = '00Q';
    private static string CONTACT_OBJECT_PREFIX = '003';
    private static string WORKORDER_OBJECT_PREFIX = '0WO';
    private static string WORKORDER_LINE_ITEM_OBJECT_PREFIX = '1WL';
    private static Integer NO_OF_RECORDS_IN_DRAFT = 10;
    private static final Integer BODY_MAX_LENGTH_OFFSET = 1024;
    private User current_user;
    private Global_Settings__c globalSettings;
    private User_Settings__c userSettings;
    //private Email_Client_BU__c businessUnit;
    private Draft_Email__c draft_params;
    private EmailMessageInternal reply_to_message;
    private Map < integer, FromAddressItem > from_address_map;
    public boolean is_rich_text = true;
    private string email_importance = 'Normal';
    private integer total_attachments_size_in_bytes = 0;
    private boolean page_parms_is_actioned = false;
    private boolean template_frame_is_active = false;
    private boolean is_autosave = true;
    private string related_obj_id;
    private boolean from_address_parm_is_done = false;
    public List < RelatedTo > RelatedtoList {
        get;
        set;
    }
    
    public Set < String > RelatedtoHistory {
        get;
        set;
    } // set to hold selected options from related to to avoid duplicate options in related to 
    private boolean oweas_validated;
    public Set < Id > InvalidOWEs {
        get;
        set;
    }
    private string emailHeadersAsText {
        get;
        set;
    }
    public String errorLevel {get; set;}
     public String errorMessages {get; set;}
    public void showMessage() 
	  {
	    if(errorLevel == 'ERROR') 
	    {
	        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, errorMessages));   
	    }
	  }
  
    public String tagDelimiter {
        get {
            return Constants.TAG_DELIMITER;
        }
    }
    public string attachmentLocation {
        get;
        set;
    } // get default from user settings

    public boolean inConsole {
        get;
        set;
    }
    /*Show/Hide To Field : START*/
    public boolean HideToField {
        get {
            boolean result = false;
            if (globalSettings != null) {
                result = globalSettings.EC_Hide_To_Field__c;
            }
            return result;
        }
    }

    public string AdditionalToLabel {
        get {
            string Label = 'Additional To';
            if (HideToField == true)
                Label = 'To';

            return Label;
        }
    }
    
    
    /*Additional Related to Work : START*/
    private String GetKeyPrefixFromFieldName(string RelatedToAPIName) {
        string prefix = '';
        try 
        {
            Map < string, string > resultMap = eObject.emailObjectReferenceFieldMap;
            Map < String, Schema.SObjectType > global_describe = Schema.getGlobalDescribe();
            prefix = global_describe.get(resultMap.get(RelatedToAPIName)).getDescribe().getKeyPrefix();
        } 
        catch (exception ex) 
        {}

        return prefix;
    }
    public pagereference ObjectOptionOnChange() {
        //remove from history
        RelatedtoHistory.clear();
        if (MainRelatedToFieldAPIName != '') {
            RelatedtoHistory.add(MainRelatedToFieldAPIName);
        }

        for (integer x = 0; x < RelatedtoList.size(); x++) {
            RelatedTo rt = RelatedtoList[x];
            system.debug('rt:' + rt);
            if (RelatedToHistory.contains(rt.RelatedToAPIName)) {
                rt.RelatedToAPIName = RelatedObjectOptions2[0].getvalue();
            }
            rt.RelatedToSobjectPrefix = GetKeyPrefixFromFieldName(rt.RelatedToAPIName);
            rt.RelatedObjectOptions = RelatedObjectOptions2;
            system.debug('rt.RelatedToAPIName:' + rt.RelatedToAPIName);
            RelatedToHistory.add(rt.RelatedToAPIName);
            system.debug(RelatedToHistory + 'rt: afterupdate:' + rt);
            RelatedtoList[x] = rt;
        }
        return null;
    }

    public pagereference AddAnother() {
        system.debug('RelatedtoList:' + RelatedtoList);
        if (RelatedObjectOptions2 != null && RelatedObjectOptions2.size() >= 1) {
            string RelatedToAPIName = RelatedObjectOptions2[0].getvalue();
            RelatedtoList.add(new RelatedTo(RelatedtoList.size(), RelatedObjectOptions2, GetKeyPrefixFromFieldName(RelatedToAPIName)));
            RelatedtoHistory.add(RelatedToAPIName);
        }
        return null;
    }
    public pagereference Remove() {
        Integer removeIndex = Integer.ValueOf(apexPages.currentPage().getParameters().get('indexId'));

        if (RelatedtoList.size() <= removeIndex) {
            return null;
        }
        //remove from history
        RelatedtoHistory.clear();
        if (MainRelatedToFieldAPIName != '') {
            RelatedtoHistory.add(MainRelatedToFieldAPIName);
        }

        //remove index from list
        RelatedtoList.Remove(removeIndex);

        //Reorder Ids
        for (integer i = 0; i < RelatedtoList.size(); i++) {
            RelatedTo rt = RelatedtoList[i];
            rt.IdIndex = i;
            rt.RelatedObjectOptions = RelatedObjectOptions2;
            RelatedtoHistory.add(rt.RelatedToAPIName);
            RelatedtoList[i] = rt;
        }

        return null;
    }
    private void GetRelatedtoList() {
        //EmailIdParm
        if (eObject.previousEmailObject.previousEmailId != null) {
            try {
            	
                Map < string, string > ReferenceFieldMap = eObject.emailObjectReferenceFieldMap;

                SObject originalCustomObject = EmailClientInitController.GetCustomStorageEmailObject(eObject.previousEmailObject.previousEmailId) ;

                boolean result = RelatedObjectRecordNameNumberIsValid();

                Set < Id > rIds = new Set < Id > ();
                for (string rt: ReferenceFieldMap.keySet()) {
                    if (originalCustomObject.get(rt) != null) {
                        rIds.add((string) originalCustomObject.get(rt));
                    }
                }
                Map < Id, Lead > ConvertedLeadMap = new Map < Id, Lead > ([Select Id, Thread_ID__c, ConvertedOpportunityId from Lead where Id IN: rIds AND isConverted = true]);

                for (string rt: ReferenceFieldMap.keySet()) {
                    if (originalCustomObject.get(rt) != null) {
                        if (eObject.relatedObject.relatedObjectId != (string) originalCustomObject.get(rt) && !ConvertedLeadMap.containskey((Id) originalCustomObject.get(rt))) {
                            RelatedTo temporary = new RelatedTo();

                            temporary.IdIndex = RelatedtoList.size();
                            temporary.RelatedToSobjectPrefix = SfUtilities.getSObjectDescription(ReferenceFieldMap.get(rt)).getKeyPrefix();
                            temporary.RelatedToAPIName = rt;
                            temporary.RelatedObjectOptions = RelatedObjectOptions2;
                            temporary.RelatedToSObjectId = (string) originalCustomObject.get(rt);
                            temporary.RelatedToSObjectName = RelatedObjectRecordName(ReferenceFieldMap.get(rt), temporary.RelatedToSobjectPrefix, temporary.RelatedToSObjectId);

                            RelatedtoHistory.add(temporary.RelatedToAPIName);
                            RelatedtoList.add(temporary);
                        }
                    }
                }
            } catch (exception ex) {}
        }
    }

    public boolean CheckIsConverted(string rId) {
        boolean result = false;
        system.debug('RId:' + rId + ': substring: ' + rId.substring(0, 3));
        system.debug(rId.substring(0, 3) == LEAD_OBJECT_PREFIX);
        try {
            if (Test.isRunningTest()) {
                return false;
            } else if (rId.substring(0, 3) == LEAD_OBJECT_PREFIX) {
                List < Lead > LeadList = new List < Lead > ();
                LeadList = [Select Id, Thread_ID__c, ConvertedOpportunityId from Lead where Id =: rId AND isConverted = true limit 1];

                if (LeadList.size() > 0) {
                    result = true;
                }
            }
        } catch (exception e) {}
        return result;
    }
    @TestVisible
    private void replaceThreadIdWhenLeadConverted(string source_tid, string source_tid_new, string target_tid) {
        string thread_id = source_tid;
        string thread_id_new = source_tid_new;
        Boolean is_source_old = true;
        Boolean is_source_old_new = true;
        Boolean is_target_old = true;
        if (thread_id.contains('{') && thread_id.contains('}')) {
            thread_id = thread_id.replace('{', '\\{');
            thread_id = thread_id.replace('}', '\\}');
            is_source_old = false;
        }
        if (thread_id_new != null && thread_id_new.contains('{') && thread_id_new.contains('}')) {
            thread_id_new = thread_id_new.replace('{', '\\{');
            thread_id_new = thread_id_new.replace('}', '\\}');
            is_source_old_new = false;
        }
        string target_thread_id = target_tid;
        if (target_thread_id.contains('{') && target_thread_id.contains('}')) {
            is_target_old = false;
        }
        //thread id 1
        Subject = Utilities.resolvedThreadIdBrackets(Subject, thread_id, target_thread_id, is_source_old, is_target_old);
        Body = Utilities.resolvedThreadIdBrackets(Body, thread_id, target_thread_id, is_source_old, is_target_old);
        
        //thread id 2
        if (thread_id_new != null) 
        {
            Subject = Utilities.resolvedThreadIdBrackets(Subject, thread_id_new, target_thread_id, is_source_old_new, is_target_old);
            Body = Utilities.resolvedThreadIdBrackets(Body, thread_id_new, target_thread_id, is_source_old_new, is_target_old);
        }

    }
    public void UpdateThreadId() {
        string regex = 'ref:[\\w]+[.][\\w]+:ref|tid:[\\w]+[.][\\w]+:tid|Ref\\{[\\w]{0,10}[.][\\w]{0,10}[:][\\w]{0,10}[.][\\w]{0,10}\\}';

        //Set<string> threadIdSet = new Set<string>();
        Set < string > record_ids = new Set < string > ();
        Pattern patternObj = Pattern.compile(regex);

        Matcher matcher = patternObj.matcher(Subject);

        while (matcher.find()) {
            string thread_id = matcher.group();
            //threadIdSet.add(resultstr);
            string resultstr = RelatedRecordSearch.getRecordIDInOldFormat(thread_id);
            if (resultstr != null) {
                record_ids.add(resultstr);
            } else {
                resultstr = RelatedRecordSearch.getRecordIDInNewFormat(thread_id);
                if (resultstr != null) {
                    record_ids.add(resultstr);
                }
            }
        }

        Matcher matcher_Body = patternObj.matcher(Body);

        while (matcher_Body.find()) {
            string thread_id = matcher_Body.group();
            //threadIdSet.add(resultstr);
            string resultstr = RelatedRecordSearch.getRecordIDInOldFormat(thread_id);
            if (resultstr != null) {
                record_ids.add(resultstr);
            } else {
                resultstr = RelatedRecordSearch.getRecordIDInNewFormat(thread_id);
                if (resultstr != null) {
                    record_ids.add(resultstr);
                }
            }
        }

        if (record_ids.size() > 0) {
            Boolean is_thread_replaced = false;
            String soql;
            List < sObject > lead_list = new List < Lead > ();
            try {
                soql = 'SELECT Id,ConvertedOpportunityId,ConvertedOpportunity.Thread_Id_2__c,Thread_Id_2__c,Thread_Id__c from Lead ' +
                    ' where isconverted = true AND Id IN:record_ids Limit 200';
                lead_list = database.query(soql);
                for (sObject l: lead_list) {
                    if (l.get('ConvertedOpportunityId') != null) {
                        Sobject convertedOpportunity = l.getSObject('convertedOpportunity');
                        string thread_id = (string) l.get('Thread_Id_2__c');
                        string thread_id_new = (string) l.get('Thread_Id__c');
                        replaceThreadIdWhenLeadConverted(thread_id, thread_id_new, (string) convertedOpportunity.get('Thread_Id_2__c'));
                        is_thread_replaced = true;
                    }
                }
            } catch (Exception ex) {
                system.debug('UpdateThreadId:' + ex.getMessage());
            }
            if (!is_thread_replaced) {
                try {
                    soql = 'SELECT Id,ConvertedOpportunityId,ConvertedOpportunity.Thread_Id__c,Thread_Id_2__c,Thread_Id__c from Lead ' +
                        ' where isconverted = true AND Id IN:record_ids Limit 200';
                    lead_list = database.query(soql);
                    for (sObject l: lead_list) {
                        if (l.get('ConvertedOpportunityId') != null) {
                            Sobject convertedOpportunity = l.getSObject('convertedOpportunity');
                            string thread_id = (string) l.get('Thread_Id_2__c');
                            string thread_id_new = (string) l.get('Thread_Id__c');
                            string target_thread_id = (string) convertedOpportunity.get('Thread_Id__c');
                            replaceThreadIdWhenLeadConverted(thread_id, thread_id_new, target_thread_id);
                            is_thread_replaced = true;
                        }
                    }
                } catch (Exception ex) {
                    system.debug('UpdateThreadId:' + ex.getMessage());
                }

            }
            if (!is_thread_replaced) {
                try {
                    soql = 'SELECT Id,ConvertedOpportunityId,ConvertedOpportunity.Thread_Id_2__c,Thread_Id__c from Lead ' +
                        ' where isconverted = true AND Id IN:record_ids Limit 200';
                    lead_list = database.query(soql);
                    for (sObject l: lead_list) {
                        if (l.get('ConvertedOpportunityId') != null) {
                            Sobject convertedOpportunity = l.getSObject('convertedOpportunity');
                            string thread_id = (string) l.get('Thread_Id__c');
                            replaceThreadIdWhenLeadConverted(thread_id, null, (string) convertedOpportunity.get('Thread_Id_2__c'));
                            is_thread_replaced = true;
                        }
                    }
                } catch (Exception ex) {
                    system.debug('UpdateThreadId:' + ex.getMessage());
                }

            }
            if (!is_thread_replaced) {
                for (lead l: [select Id, ConvertedOpportunityId, ConvertedOpportunity.Thread_Id__c, Thread_Id__c
                        from lead
                        where isconverted = true
                        AND Id IN: record_ids Limit 200
                    ]) //Thread_Id__c IN:threadIdSet])
                {
                    if (l.ConvertedOpportunityId != null) {
                        string thread_id = l.Thread_Id__c;
                        replaceThreadIdWhenLeadConverted(thread_id, null, l.ConvertedOpportunity.Thread_Id__c);

                    }
                }
            }

        }
    }

    public string MainRelatedToFieldAPIName {
        get {
            string str = '';
            if (eObject.emailObjectAPIName != null || eObject.previousEmailObject.previousEmailId != null) {
                try 
                {
                	
                    Map < string, string > ReferenceFieldMap = eObject.emailObjectReferenceFieldMap;

                    SObject originalCustomObject = EmailClientInitController.GetCustomStorageEmailObject(eObject.previousEmailObject.previousEmailId) ;

                    for (string rt: ReferenceFieldMap.keySet()) {
                        system.debug('rt value:' + rt);
                        string keyprefix = '';

                        try {
                            keyprefix = SfUtilities.getSObjectDescription(ReferenceFieldMap.get(rt)).getKeyPrefix();
                            system.debug('keyprefix' + keyprefix);


                            if (originalCustomObject != null && originalCustomObject.get(rt) != null) {
                                
                                if (eObject.relatedObject.relatedObjectId == (string) originalCustomObject.get(rt)) {
                                    str = rt;
                                    break;
                                }
                            }
                            if (string.valueOf(eObject.relatedObject.relatedObjectId).substring(0, 3) == keyprefix) {
                                system.debug('else rt' + rt);
                                str = rt;
                                break;
                            }
                        } catch (exception e) {
                            system.debug('exception: ' + e.getMessage());
                        }
                    }

                } catch (exception e) {}
            }
            system.debug('str:' + str);
            return str;
        }
    }

    private boolean sendEmailToTarget {
        get;
        set;
    }
    
    public EmailObject eObject {get;set;}

    // Constructor
    public EmailClientController() {

		eObject = new EmailObject(system.currentpageReference().getParameters());
		
        
		oweas_validated = false;

        sendEmailToTarget = true;

        isInMobile = false;
        //InvalidOWEs = new Set<Id>();
        inConsole = false;

        isPEorGE = false;

        string salesforceEdition = SfUtilities.getOrgEdition();
        if (salesforceEdition == 'Professional Edition' || salesforceEdition == 'Group Edition') // || salesforceEdition == 'Developer Edition')
        {
            isPEorGE = true;
        }

        // Get configuration
        globalSettings = eObject.globalSettings;// GlobalSettingsController.GetSettings();
        // Get user settings
        userSettings = eObject.userSettings;//UserSettingsController.GetSettings();
        // Get draft params record
        GetDraftParams();

        BusinessUnitIsSelected = false;

        RelatedtoList = new List < Relatedto > ();
        RelatedtoHistory = new Set < String > ();
        if (MainRelatedToFieldAPIName != '') {
            RelatedtoHistory.add(MainRelatedToFieldAPIName);
        }
        GetRelatedtoList();

        loadBusinessUnit();

        TemplateIdParm = setTemplateParamId();
        system.debug(TemplateIdParm + ': TemplateIdParm ');

        // Initialise properties & variables
        if (system.currentpageReference().getparameters().get('isrichtext') != null) {
            string s = system.currentpageReference().getparameters().get('isrichtext');
            is_rich_text = s.equals('true');
        } else {
            string s = userSettings.EC_Email_Format__c;
            is_rich_text = s.equals('HTML');
            system.currentpageReference().getparameters().put('isrichtext', string.valueOf(is_rich_text));
        }
        
        Name = '';
                
        InitToAndAdditionalTo();
        InitCC();
        InitBcc();
        InitSubject();
        InitBody();
          
        // Get related object name/number if valid
        if (eObject.relatedObject.relatedObjectId != null && RelatedObjectPrefixIsValid()) 
        {
            related_obj_id = eObject.relatedObject.relatedObjectId;
            RelatedToSObjectPrefix = string.valueOf(eObject.relatedObject.relatedObjectId).substring(0, 3);
            RelatedToSObjectName = GetRelatedObjectRecordNameNumber();
        } else {
            related_obj_id = null;
            RelatedToSObjectPrefix = '';
            RelatedToSObjectName = '';
        }


        // If reply or forward get original email details
        if (eObject.IsEmailReply || eObject.IsEmailReplyToAll || eObject.IsEmailForward)
            EmailReplyAndForwardInit();


        //Following line is for cleaning HTML Body of email that does not use E2A Email Controller 
        Body = Utilities.cleanHTMLBody(Body, '<!(.)*?>');
        if (!Test.isRunningTest())
        {
            UpdateThreadId();
        }
        getAttachmentLocation(false);

        prePopulateTags();
        setTagList();
        system.debug('tagObjectList : ' + tagObjectList);
        
    }
    
    public Id RelatedObjectIdParm 
    {
    	get
    	{
    		return eObject.parameters.relatedIdParm;
    	}
    }
    
    /*To & Additional To*/
    public void InitToAndAdditionalTo() 
    {
    	system.debug('eObject.parameters.targetIdParm: '+eObject.parameters.targetIdParm);
        ToAddresses = '';
        if (eObject.parameters.p24Parm != null) 
        {
            ToAddresses = eObject.parameters.p24Parm;
        }
        if (eObject.parameters.targetIdParm != null && !(eObject.isEmailReply || eObject.isEmailReplyToAll || eObject.isEmailForward)) 
        {
            system.debug('in TargetIdParam != null' + eObject.parameters.targetIdParm);
            if (HideToField) {
                string TargetEmail = eObject.emailIsFromLead ? eObject.leadObject.Email : eObject.contactObject.Email;//GetTargetNameEmailUsingId(eObject.parameters.targetIdParm);
                if (TargetEmail != null && !ToAddresses.contains(TargetEmail)) 
                {
                    ToAddresses += (ToAddresses != null && ToAddresses != '') ? ToAddresses + ';' + TargetEmail : TargetEmail;
                }
            } 
            else 
            {
                TargetName = eObject.emailIsFromLead ? eObject.leadObject.Name : eObject.contactObject.Name; // GetTargetNameUsingID(eObject.parameters.targetIdParm);
            }

            system.debug('Target Name: ' + TargetName);
        }

        if (eObject.parameters.toParm != null && !(eObject.isEmailReply || eObject.isEmailReplyToAll || eObject.isEmailForward)) {
            system.debug('eObject.toParm' + eObject.parameters.toParm);
            if (eObject.parameters.toParm == 'setBlank') 
            {
                TargetName = '';
                sendEmailToTarget = false;
            } else if (Utilities.emailAddressIsValid(eObject.parameters.toParm)) {
                if (!ToAddresses.contains(eObject.parameters.toParm)) {
                    ToAddresses = (ToAddresses != null && ToAddresses != '') ? ToAddresses + ';' + eObject.parameters.toParm : eObject.parameters.toParm;
                }
            }
        }

        validateToField();

        if (globalSettings.Auto_Fill_Contact_in_New_emails__c && !(eObject.isEmailReply || eObject.isEmailReplyToAll || eObject.isEmailForward)) {
            SetToOnLoad();
        }
    }
    
    /*CC*/
    public void InitCC()
    {
    	CcAddresses = '';
		if (eObject.parameters.p4Parm != null)
		{
	    	CcAddresses = eObject.parameters.p4Parm;
		}
    }
    
    /*Bcc*/
    public void InitBcc()
    {
    	BccAddresses = '';
		if (eObject.parameters.p5Parm != null)
		{
		    BccAddresses = eObject.parameters.p5Parm;
		}
		// If send bcc enabled then set the checkbox default
		if (globalSettings.Uncheck_BCC_checkbox_for_all_Users__c == 'Use value in User settings') 
		{
		    SenderBccSelect = userSettings.EC_Sender_Bcc_Default_Value__c;
		}
		else 
		{
		    SenderBccSelect = globalSettings.Uncheck_BCC_checkbox_for_all_Users__c == 'Yes' ? true : false;
		}
    }
    
    /*Subject*/
    public void InitSubject()
    {
        if(Subject == null)
        {
            Subject = '';
        }
		if (Subject == '' && eObject.parameters.p6Parm != null) 
		{
		    if (eObject.parameters.p6Parm.length() < 100)
		        Subject = eObject.parameters.p6Parm.subString(0, eObject.parameters.p6Parm.length());
		    else
		        Subject = eObject.parameters.p6Parm.subString(0, 100);
		}
        System.debug('InitSubject : '+Subject);
    }
    
    /*Body*/
    public void InitBody()
    {
    	Body = '';
    	
    	if (eObject.parameters.p7Parm != null)
    	{
        	Body = eObject.parameters.p7Parm;
    	}
        System.debug('InitBody:' + Body);
    }
    
    /*validate to field*/
    public void validateToField() {
        leadEmial = '';
        if (TargetName != null && TargetName.trim() != '') {
            leadEmial = eObject.emailIsFromLead ? eObject.leadObject.Email : eObject.contactObject.Email; //GetTargetNameEmailUsingId(eObject.parameters.targetIdParm);
            string error_msg = (eObject.emailIsFromLead) ? 'Lead' : 'Contact';


            if (eObject.parameters.targetIdParm != null && (leadEmial == null || leadEmial == '')) {
                ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.WARNING, error_msg + ' selected in "To" does not have a valid email address');
                ApexPages.addMessage(myMsg);
            }

            //TargetName = GetTargetNameUsingID(eObject.parameters.targetIdParm);
        }
    }
    
    /*-- Load To from Contact Lookup on related object --*/
    public void SetToOnLoad() {
        system.debug('targetId: ' + targetId);
        if (targetId == null && eObject.emailIsFromContact) //EmailIsFromLead)
        {
            //get contact lookups
            try {
                //string object_name = SfUtilities.getSObjectNameById(eObject.relatedObject.relatedObjectId);
                string object_name = eObject.relatedObject.relatedObjectAPIName;

                List < String > contact_lookup_api_name = SfUtilities.getSObjectReferenceFieldINSobject(object_name, '003');

                if (contact_lookup_api_name.size() > 0) {
                    string soql_query = 'Select Id ';

                    for (string lookup_api_name: contact_lookup_api_name) {
                        soql_query += ',' + lookup_api_name;

                        if (lookup_api_name.contains('__c')) {
                            soql_query += ',' + lookup_api_name.replace('__c', '__r') + '.Name';
                            soql_query += ',' + lookup_api_name.replace('__c', '__r') + '.Email';
                        } else {
                            lookup_api_name = lookup_api_name.removeEnd('Id');
                            soql_query += ',' + lookup_api_name + '.Name';
                            soql_query += ',' + lookup_api_name + '.Email';
                        }
                    }

                    soql_query += ' from ' + object_name + ' where Id = \'' + eObject.relatedObject.relatedObjectId + '\' limit 1';

                    system.debug('soql_query: ' + soql_query);
                    //query object 
                    List < Sobject > related_object_detail = Database.Query(soql_query);

                    if (related_object_detail.size() > 0) {
                        //Sobject related_obj = related_object_detail[0];
                        //system.debug('related_obj: '+related_obj);
                        for (string lookup_api_name: contact_lookup_api_name) {
                            if (related_object_detail[0].get(lookup_api_name) != null) {
                                if (eObject.emailIsFromContact) {
                                    targetId = (string) related_object_detail[0].get(lookup_api_name);

                                    if (eObject.parameters.toParm != 'setBlank' && !HideToField) {
                                        if (!lookup_api_name.contains('__c')) {
                                            lookup_api_name = lookup_api_name.removeEnd('Id');
                                        }
                                        targetName = (string) related_object_detail[0].getSObject(lookup_api_name.contains('__c') ? lookup_api_name.replace('__c', '__r') : lookup_api_name).get('Name');
                                        sendEmailToTarget = false;
                                    }
                                }

                                //for both if and else
                                if (eObject.parameters.toParm != 'setBlank' && (HideToField || eObject.emailIsFromLead)) {
                                    if (!lookup_api_name.contains('__c')) {
                                        lookup_api_name = lookup_api_name.removeEnd('Id');
                                    }
                                    string contact_email = (string) related_object_detail[0].getSObject(lookup_api_name.contains('__c') ? lookup_api_name.replace('__c', '__r') : lookup_api_name).get('Email');

                                    if (contact_email != null && contact_email != '') {
                                        ToAddresses += (ToAddresses != '' && ToAddresses != null) ? SEMI_COLON + ' ' + contact_email : contact_email;
                                    }
                                }

                                break;
                            }
                        }
                    }
                }
            } catch (exception e) {
                system.debug('-- Error Details --');
                system.debug('-- Error Message --' + e.getMessage());
                system.debug('-- Error Stack Trace --' + e.getStackTraceString());
            }
        }
    }

    /*Business Unit Module*/

    private Business_Unit__c businessUnit;
    private Set < Id > businessUnitAllowedOWEAs;
    public boolean BusinessUnitIsSelected {
        get;
        set;
    }
    public string BusinessUnitId {
        get;
        set;
    }

    public List < selectOption > BusinessUnitOptions {
        get {
            List < selectOption > businessUnitList = new List < selectOption > ();
            List < Id > GroupIds = new List < Id > ();

            // Add "none" option
            businessUnitList.Add(new SelectOption('none', '- - None - -'));
            GroupIds.addAll(UserSettingsController.getCurrentUserGroups());

            for (Business_Unit__c bu: [select Id, Name
                    from Business_Unit__c
                    where id in (Select Business_Unit__c From Business_Unit_Groups__c where Public_Group_Id__c in: GroupIds)
                ]) {
                businessUnitList.Add(new SelectOption(bu.Id, bu.Name));
            }

            return businessUnitList;
        }
    }
    public void clearTag()
    {
    	tags = '';
    	newTagList = null;
    }
    /*Method called on change of BU*/
    public void SelectBusinessUnit() 
    {
    	tags = '';
    	newTagList = null;
		emailtoSelf = false; //resetting if BU is changed after validation
        SetBusinessUnit(BusinessUnitId);
        FromAddress = '0';
        from_address_map = GetFromAddressMap();
        ApplyDefaultFromAddress();

        system.debug('BusinessUnitId: ' + BusinessUnitId);

        //set template onchange
        TemplateIdParm = setTemplateParamId();
        system.debug('tempate: ' + TemplateIdParm);
        if (TemplateIdParm != null) {
            ValidateAndResolveTemplateParm();
        }
        system.currentpageReference().getparameters().put('isrichtext', string.valueOf(is_rich_text));
    }

    private void loadBusinessUnit() {
        //If default business unit specified (by url query parm or user settings) then set defaults (but not if this is a reply)
        if (globalSettings.Enable_Business_Unit__c) {
            if (globalSettings.Set_Business_Unit_from_current_record__c) {
                BusinessUnitId = getObjectLevelBusinessUnit();
            }

            if (BusinessUnitId == null) {
                if (eObject.parameters.BusinessUnitIdParm != null) {
                    BusinessUnitId = (Id) eObject.parameters.BusinessUnitIdParm;
                } else if (userSettings.Default_Business_Unit__c != 'none') {
                    BusinessUnitId = userSettings.Default_Business_Unit__c;

                } else if (globalSettings.Business_Unit_Mandatory__c == true && (isBusinessUnitEnable == true)) {
                    List < selectOption > obj_BusinessUnitOptions = BusinessUnitOptions;
                    if (obj_BusinessUnitOptions.size() > 1) {
                        BusinessUnitId = obj_BusinessUnitOptions[1].getValue();
                    }

                }
            }

            SetBusinessUnit(BusinessUnitId);
        }
    }

    /*Set selected BU and BU's OWEAs*/
    private void SetBusinessUnit(string business_unit_id) {
        BusinessUnitIsSelected = false;
        businessUnitAllowedOWEAs = null;
        businessUnit = null;

        if (business_unit_id != 'none' && business_unit_id != null) {
            try {
                businessUnit = [Select EC_Default_Email_Template__c, EC_Default_Forward_Email_Template__c,
                    EC_Default_Reply_Email_Template__c, Allow_All_From_Addresses__c, Allow_BCC_Deselect__c,
                    User_From_Address_Allowed__c, Default_BCC_Address__c,
                    Default_OWEA_Id__c, Description__c
                    from Business_Unit__c
                    where id =: business_unit_id
                ];

                BusinessUnitIsSelected = true;
            } catch (exception e) {
                system.debug('Exception in fetching BU: ' + e.getMessage());
            }
        }

        // Get list of allowed owea from-addresses
        if (BusinessUnitIsSelected) {
            businessUnitAllowedOWEAs = new Set < Id > ();
            for (Business_Unit_OWEA__c buOWEA: [select OWEA_Id__c
                    from Business_Unit_OWEA__c
                    where Business_Unit__c =: businessUnit.Id
                ]) {
                businessUnitAllowedOWEAs.add(buOWEA.OWEA_Id__c);
            }
        }
    }

    /*This method returns Id (of BU) if there is a Business Unit specified for the related object
    return null if BU lookup on related object is blank or not specified at all*/
    private Id getObjectLevelBusinessUnit() {
        Id bu_id = null;
        try {
            if (eObject.relatedObject.relatedObjectId != null) 
            {
                string related_object_name = eObject.relatedObject.relatedObjectAPIName;//SfUtilities.getSObjectDescriptionById(eObject.relatedObject.relatedObjectId).getName();

                //Get key prefix of business unit object
                Schema.DescribeSObjectResult business_unit_object_describe = SfUtilities.getSObjectDescription('ortoo_e2a__Business_Unit__c');

                string bu_key_prefix;
                if (business_unit_object_describe != null) {
                    bu_key_prefix = business_unit_object_describe.getKeyPrefix();
                } else {
                    system.debug('Unable to find object ortoo_e2a__Business_Unit__c !');
                    return null;
                }

                //check and get if any BU lookup exists on related object
                List < String > bu_lookups_in_related_object = SfUtilities.getSObjectReferenceFieldINSobject(related_object_name, bu_key_prefix);

                if (bu_lookups_in_related_object.size() == 0) 
                {
                    system.debug('Unable to find object ortoo_e2a__Business_Unit__c lookup in related object ' + related_object_name);
                    return null;
                } 
                else if (bu_lookups_in_related_object.size() > 0) 
                {
                    //Query all BUs to return ID
                    string soql_query = 'Select Id, ';

                    soql_query += Utilities.listToDelimitedString(',', bu_lookups_in_related_object);

                    soql_query += ' from ' + related_object_name + ' where Id = \'' + eObject.relatedObject.relatedObjectId + '\' limit 1';

                    try {
                        List < Sobject > related_object_record_list = Database.Query(soql_query);

                        for (Sobject related_object_record: related_object_record_list) {
                            for (string lookup_api_name: bu_lookups_in_related_object) {
                                bu_id = (Id) related_object_record.get(lookup_api_name);

                                if (bu_id != null) {
                                    break; //We need to select first one in the list
                                }
                            }
                        }
                    } catch (exception e) {
                        system.debug('Error in querying object ' + related_object_name + '. Reason: ' + e.getMessage());
                        return null;
                    }
                }
            }
        } catch (Exception e) {
            system.debug('Error in processing method objectHasBusinessUnitSpecified: ' + e.getMessage());
        }

        return bu_id;
    }

    /*END of Business Unit Module*/

    /*-- Tags --*/

    public string tags {
        get;
        set;
    }
    public Map < String, Tags__c > allTagsMap {
        get;
        set;
    }
    public List < Tags__c > tagObjectList {
        get {
            List < Tags__c > new_created_tags = new List < Tags__c > ();
            if (allTagsMap != null) {
                new_created_tags = allTagsMap.values();
            }

            return new_created_tags;
        }
    }

    private void setTagList() {
        allTagsMap = new Map < String, Tags__c > ();
        for (Tags__c tag: [SELECT Id, Colour__c, Tag_Value__c FROM Tags__c order by Tag_Value__c limit 1000]) {
            tag.Colour__c = (tag.Colour__c == null || tag.Colour__c == '') ? '(no color)' : tag.Colour__c;
            allTagsMap.put(tag.Tag_Value__c.toLowerCase(), tag);
            //tagObjectList.add(tag);
        }
    }

    public List < String > prePopulatedTags {
        get;
        set;
    }
    public void prePopulateTags() 
    {
        try {
            if (globalSettings.Copy_Tags_In_Reply_Forward__c && (eObject.isEmailReply || eObject.isEmailForward || eObject.isEmailReplyToAll)) {
                if (reply_to_message != null) {
                    tags = reply_to_message.tags;
                }
            }

            if (eObject.parameters.tagsParm != null) {
                if (tags != null && tags != '') {
                    tags += ' | ' + eObject.parameters.tagsParm;
                } else {
                    tags = eObject.parameters.tagsParm;
                }
            }

            prePopulatedTags = new List < String > ();
            if (tags.contains(Constants.TAG_DELIMITER)) {
                string tmp_tags = tags.replace(Constants.TAG_DELIMITER, '$');
                List < String > temp_tags = Utilities.delimitedStringToList('$', tmp_tags);

                for (String tag: temp_tags) {
                    prePopulatedTags.add(tag);
                }
            } else if (tags.contains(Constants.TAG_DELIMITER_WITHOUT_SPACE)) {
                tags = tags.replace(Constants.TAG_DELIMITER_WITHOUT_SPACE, Constants.TAG_DELIMITER);
                string tmp_tags = tags.replace(Constants.TAG_DELIMITER, '$');
                List < String > temp_tags = Utilities.delimitedStringToList('$', tmp_tags);

                for (String tag: temp_tags) {
                    prePopulatedTags.add(tag);
                }
            } else if (tags != '' && tags != null) {
                prePopulatedTags.add(tags);
            }
        } catch (Exception e) {
            System.Debug('Error: saveTags : ' + e.getMessage() +
                '\n Trace :' + e.getStackTraceString());
        }
    }
    public Map < String, Tags__c > newTagList {
        get;
        set;
    }
    public List < Tags__c > newTags {
        get {
            List < Tags__c > new_created_tags = new List < Tags__c > ();
            if (newTagList != null) {
                new_created_tags = newTagList.values();
            }

            return new_created_tags;
        }
    }
    public void removeTags() {
        String title = apexpages.currentPage().getParameters().get('title');
        String color = apexpages.currentPage().getParameters().get('color');
        if (newTagList != null) {
            newTagList.remove(title.toLowerCase());
        }

    }
    public void addTag() {
        if (newTagList == null) {
            newTagList = new Map < String, Tags__c > ();
        }
        String tag_value = ApexPages.CurrentPage().getParameters().get('value');
        String tag_color = ApexPages.CurrentPage().getParameters().get('color');
        if (tag_value != null && tag_color != null) {
            if (allTagsMap.containsKey(tag_value.toLowerCase())) {
                newTagList.put(tag_value.toLowerCase(), allTagsMap.get(tag_value.toLowerCase()));
            } else {
                if (newTagList.get(tag_value.toLowerCase()) == null) {
                    newTagList.put(tag_value.toLowerCase(), new Tags__c(Name = tag_value, Tag_Value__c = tag_value, Colour__c = tag_color));
                }
            }

        }
        system.debug('newTagList : ' + newTagList);
    }
    public void saveTags() {
        try {
            string selected_tags = tags.toLowerCase();
            //get all tags 
            setTagList();

            for (String key: newTagList.keySet()) {
                if (!selected_tags.contains(key)) {
                    newTagList.remove(key);
                }
                if (!allTagsMap.containsKey(key)) {
                    Tags__c temp_tag = newTagList.remove(key);
                    newTagList.put(temp_tag.Tag_Value__c.toLowerCase(), new Tags__c(Name = temp_tag.Tag_Value__c, Tag_Value__c = temp_tag.Tag_Value__c, Colour__c = temp_tag.Colour__c));
                }
            }
            System.Debug('newTagList values : ' + newTagList);
            //upsert newTagList.values();

            setTagList();

        } catch (Exception e) {
            setTagList();
            System.Debug('Error: saveTags : ' + e.getMessage() +
                '\n Trace :' + e.getStackTraceString());
        }

    }
    /*END Tags*/
    
    public void refreshUserSettings() {
        getAttachmentLocation(true);
    }

    public void getAttachmentLocation(boolean refreshSettings) {
        if (refreshSettings == true) {
            userSettings = UserSettingsController.GetSettings();
        }
        attachmentLocation = '/apex/ortoo_e2a__AttachmentPickerLocal?loc=LOCAL';

        string current_parent_prefix = '';

        if (related_obj_id != null && related_obj_id != '') {
            current_parent_prefix = related_obj_id.substring(0, 3);
        }
        List < string > per_obj_list = new List < string > ();

        if (userSettings != null && userSettings.EC_Default_Attachment_Location__c != null) {
            per_obj_list = Utilities.DelimitedStringToList(SEMI_COLON, userSettings.EC_Default_Attachment_Location__c);

            for (string s: per_obj_list) {
                if (s != null && s != '') {
                    string[] arr = s.split('=>'); // spliting key value

                    string prefix = arr[0];
                    string last_template_location = arr[1];

                    if (prefix.equals(current_parent_prefix)) //if prefix settings match
                    {
                        if (last_template_location == 'RELATED_OBJECT') {
                            attachmentLocation = '/apex/ortoo_e2a__AttachmentPickerRelatedObject?loc=RELATED_OBJECT';
                        }
                        if (last_template_location == 'RELATED_OBJECT_EMAIL') {
                            attachmentLocation = '/apex/ortoo_e2a__AttachmentPickerRelatedObject?loc=RELATED_OBJECT_EMAIL';
                        }
                        if (last_template_location == 'FILES') {
                            attachmentLocation = '/apex/ortoo_e2a__AttachmentPickerFile?loc=FILES';
                        }
                        if (last_template_location == 'DOCUMENTS') {
                            attachmentLocation = '/apex/ortoo_e2a__AttachmentPickerDocument?loc=DOCUMENTS';
                        }
                    }
                }
            }
        }

    }
    public string leadEmial {
        get;
        set;
    }
    
    // Class properties
    public boolean IsDefaultEmailGateway {
        get {
            boolean result = true;
            system.debug('globalSettings' + globalSettings);
            if (globalSettings != null && (globalSettings.Email_Gateway__c != 'Default' 
            		&& globalSettings.Email_Gateway__c != '' && globalSettings.Email_Gateway__c != null)) 
           	{
                system.debug('globalSettings.Email_Gateway__c' + globalSettings.Email_Gateway__c);
                result = false;
            }
            return result;
        }
    }
    public string EmailGateway {
        get {
            return (globalSettings != null && globalSettings.Email_Gateway__c != null) ? globalSettings.Email_Gateway__c : 'Default';
        }
    }
    public string EmailGateway_APIKey {
        get {
            return (globalSettings != null && globalSettings.Email_Gateway_API_Key__c != null) ? globalSettings.Email_Gateway_API_Key__c : '';
        }
    }
    public string EmailGateway_Domain {
        get {
            return (globalSettings != null && globalSettings.Email_Gateway_Domain__c != null) ? globalSettings.Email_Gateway_Domain__c : '';
        }
    }
    
    private string TemplateIdParm {
        get;
        set;
    }

    private string setTemplateParamId() {
        string result = null;
        string parmString = system.currentpageReference().getparameters().get('template_id');
        if (SfUtilities.IdIsValid(parmString)) {
            result = parmString;
        } else if (eObject.isEmailReply || eObject.isEmailReplyToAll) {
            result = (string) EmailTemplateUtility.getDefaultEmailTemplateId(globalSettings, userSettings, businessUnit, false, true, false);
        } else if (eObject.isEmailForward) {
            result = (string) EmailTemplateUtility.getDefaultEmailTemplateId(globalSettings, userSettings, businessUnit, false, false, true);
        } else {
            result = (string) EmailTemplateUtility.getDefaultEmailTemplateId(globalSettings, userSettings, businessUnit, true, false, false);
        }
        return result;
    }

    public string TargetObjectName {
        get {
            string result = 'Contact';
            if (eObject.emailIsFromLead)
                result = 'Lead';
            return result;
        }
    }

    @TestVisible
    private boolean EmailIsRelatedToCase {
        get {
            boolean result = false;
            if (RelatedToSObjectPrefix == '500' && RelatedToSObjectName != '')
                result = true;
            return result;
        }
    }
    
    public boolean DraftButtonIsDisabled {
        get {
            boolean result = false;
            if (template_frame_is_active == true)
                result = true;

            return result;
        }
    }

    public boolean BusinessUnitIsRendered {
        get {
            boolean result;

            if (globalSettings.Enable_Business_Unit__c == true)
                result = true;
            else
                result = false;
            return result;
        }
    }

    public List < selectOption > FromAddressOptions {
        get {

            List < selectOption > fromAddresses = new List < selectOption > ();
            InvalidOWEs = (InvalidOWEs == null) ? new Set < Id > () : InvalidOWEs;
            
            System.debug('FromAddressOptions');
			processInvalidOrgWideEmails();
            system.debug('InvalidOWEs 1 : ' + InvalidOWEs);
            //if (from_address_map == null)
            from_address_map = GetFromAddressMap();

            List < integer > positionList = new List < integer > ();
            for (integer pos: from_address_map.keySet()) {
                positionList.add(pos);
            }
            positionList.sort();
            for (integer pos: positionList) {
                system.debug('pos: ' + pos);
                FromAddressItem faItem = from_address_map.get(pos);
                system.debug('faItem: ' + faItem);
                string userDisplayName = '"' + faItem.DisplayName + '" <' + faItem.EmailAddress + '>';
                fromAddresses.Add(new selectOption(string.ValueOf(pos), userDisplayName));

            }
            system.debug('FRom Address in option' + FromAddress);

            FromAddress = '0';
            ApplyDefaultFromAddress();
            system.debug('From Address after option' + FromAddress);

            return fromAddresses;
        }
        private set;
    }

    public List < selectOption > ImportanceOptions {
        get {
            List < selectOption > emailPriorities = new List < selectOption > ();
            emailPriorities.Add(new SelectOption('Highest', 'Highest'));
            emailPriorities.Add(new SelectOption('High', 'High'));
            emailPriorities.Add(new SelectOption('Normal', 'Normal'));
            emailPriorities.Add(new SelectOption('Low', 'Low'));
            emailPriorities.Add(new SelectOption('Lowest', 'Lowest'));
            return emailPriorities;
        }
    }

    public string TemplateLookupSelectedTemplateId {
        get;
        set;
    }

    public string TemplateLookupSelectedTemplateType {
        get;
        set;
    }

    public string SelectedDraftEmailId {
        get;
        set;
    }

    public List < Document > getDocuments() {
        List < Document > image_srcs = new List < Document > ();
        /*
        for (Document doc: [SELECT Id, IsPublic, Name, Type FROM Document
                WHERE(Type = 'png'
                    OR Type = 'jpeg'
                    OR Type = 'jpg'
                    OR Type = 'bmp'
                    OR Type = 'tiff')
                AND IsPublic = true
                order by Name Asc, CreatedDate DESC LIMIT 1000
            ]) {
            if ((doc.Name).length() > 20) {
                doc.Name = (doc.Name).substring(0, 19) + '...';
            }
            image_srcs.add(doc);
        }*/
        return image_srcs;
    }

    public string getInstanceUrl {
        get {
            return System.URL.getSalesforceBaseURL().toExternalForm() + '/';
        }
    }

    public string getOrgId {
        get {
            return UserInfo.getOrganizationId();
        }
    }

    public string TargetName {
        get;
        set;
    }

    public string TargetId {
        get {
            system.debug('eObject.parameters.targetIdParm' + eObject.parameters.targetIdParm);
            //SetToOnLoad();
            return (TargetId != null && TargetId != '') ? TargetId : eObject.parameters.targetIdParm;
        }
        set;
    } // field to store value in hidden field

    public List < SelectOption > RelatedObjectOptions {
        get {
            try {
            	
                Map < string, string > resultMap = eObject.emailObjectReferenceFieldMap;

                Map < String, Schema.SObjectType > global_describe = Schema.getGlobalDescribe();
                List < selectOption > relatedObjectSelectionList = new List < selectOption > ();

                for (string name: resultMap.keySet()) {
                    Schema.DescribeSObjectResult r = global_describe.get(resultMap.get(name)).getDescribe();
                    //with API Name in labels
                    //relatedObjectSelectionList.Add(new SelectOption(r.getKeyPrefix(), r.getLabel()+' ['+name+']'));

                    relatedObjectSelectionList.Add(new SelectOption(r.getKeyPrefix(), r.getLabel()));
                }
                if (relatedObjectSelectionList.size() == 0)
                    relatedObjectSelectionList.Add(new SelectOption('none', eObject.emailObjectAPIName));
                return relatedObjectSelectionList;
            } catch (exception ex) {
                system.debug('errro' + ex.getMessage());
            }
            return null;
        }
    }
    public List < SelectOption > RelatedObjectOptions2 {
        get {
            try {
                Map < string, string > resultMap = eObject.emailObjectReferenceFieldMap;
                
                Map < String, Schema.SObjectType > global_describe = Schema.getGlobalDescribe();
                List < selectOption > relatedObjectSelectionList = new List < selectOption > ();

                for (string name: resultMap.keySet()) {
                    if (!RelatedtoHistory.contains(name)) {
                        Schema.DescribeSObjectResult r = global_describe.get(resultMap.get(name)).getDescribe();
                        //with API Name in labels
                        relatedObjectSelectionList.Add(new SelectOption(name, r.getLabel())); //+' ['+name+']'));
                    }
                    //relatedObjectSelectionList.Add(new SelectOption(r.getKeyPrefix(), r.getLabel()));
                }
                //if(relatedObjectSelectionList.size() == 0)
                //relatedObjectSelectionList.Add(new SelectOption('none', '--None--'));//ObjectName));
                return relatedObjectSelectionList;
            } catch (exception ex) {
                system.debug('errro' + ex.getMessage());
            }
            return null;
        }
    }

    public string RelatedToSObjectPrefix {
        get;
        set;
    }

    public string RelatedToSObjectName {
        get;
        set;
    }

    public string RelatedToSObjectId {
        get {
            system.debug('RelatedToSObjectId:' + eObject.relatedObject.relatedObjectId);
            return (RelatedToSObjectId == null || RelatedToSObjectId == '') ? eObject.relatedObject.relatedObjectId : RelatedToSObjectId;

        }
        set;
    } // hidden Id on change of lookup

    public string RelatedToReturnID {
        get;
        set;
    }

    public string FromAddress {
        get;
        set;
    }

    public string ToAddresses {
        get;
        set;
    }

    public string CcAddresses {
        get;
        set;
    }

    public boolean BccIsRendered {
        get {
            boolean result;
            if (globalSettings.EC_Compliance_Bcc_Enabled__c == true)
                result = false;
            else
                result = true;

            return result;
        }
    }

    public string BccAddresses {
        get;
        set;
    }

    public boolean DefaultBccIsRendered {
        get {
            boolean result;

            if ((BusinessUnitIsSelected) && (businessUnit.Default_BCC_Address__c != null))
                result = true;
            else
                result = false;

            return result;
        }
    }

    public boolean DefaultBccSelectIsDisabled {
        get {
            boolean result;
            if ((BusinessUnitIsSelected) && (businessUnit.Allow_BCC_Deselect__c == true))
                result = false;
            else
                result = true;

            return result;
        }
    }

    public boolean DefaultBccSelect {
        get;
        set;
    }

    public string DefaultBccAddress {
        get {
            string result = '';
            if (BusinessUnitIsSelected)
                result = businessUnit.Default_BCC_Address__c; //BCC_Address__c;

            return result;
        }
    }

    public string SenderBccStyle {
        get {
            string result;
            if (SenderBccSelect == false)
                result = 'color:grey';
            return result;
        }
    }

    public boolean SenderBccSelect {
        get;
        set;
    }

    public string SenderBccAddress {
        get {
            string result = '';
            /*if (userSettings.Enable_Sender_Bcc__c == true)*/
            result = userSettings.EC_Email_Address__c;

            return result;
        }
    }

    public string Importance {
        get {
            return email_importance;
        }
        set {
            email_importance = value;
        }
    }

    public boolean ImportanceIsRendered {
        get {
            boolean result = true;
            /*
            if(globalSettings.Salesforce_Email_Client_Only__c == true)
              result = false;*/

            return result;
        }
    }

    public string Subject {
        get;
        set;
    }
    public string Name {
        get;
        set;
    }

    public boolean SubjectInputTextIsRendered {
        get {
            return (!template_frame_is_active);
        }
    }

    public boolean SubjectOutputTextIsRendered {
        get {
            return (template_frame_is_active);
        }
    }


    public boolean ShowBody {
        get;
        set;
    }

    public string Body {
        get;
        set;
    }

    public boolean TemplateFrameIsRendered {
        get {
            return template_frame_is_active;
        }
    }

    public string TemplateFrameUrl {
        get;
        private set;
    }

    public string CurrentMailFormat {
        get {
            if (is_rich_text)
                return 'HTML';
            else
                return 'Plain text';
        }
    }

    public string SwitchToMailFormat {
        get {
            saveTags();
            if (!is_rich_text)
                return 'HTML';
            else
                return 'Plain text';
        }
    }

    public string EmailAttachmentCount {
        get {
            string result = 'none';
            integer attachmentCount = [select count()
                from Attachment
                where ParentId =: TempAttachmentParentId
            ];
            if (attachmentCount > 0)
                result = string.valueOf(attachmentCount);
            return result;
        }
    }
    public string inlineAttachedImageName {
        get;
        set;
    }
    /*
      EmailAttachmentsList shows attachments list when we forward an email 
      So we remove inline image that shows as normal attachment too
    */
    public List < AttachmentListItem > EmailAttachmentsList {
        get {
            total_attachments_size_in_bytes = 0;

            List < AttachmentListItem > attachments = new List < AttachmentListItem > ();
            for (Attachment a: [select Id, Name, BodyLength, Description
                    from Attachment
                    where ParentId =: TempAttachmentParentId
                    //and Name != :inlineAttachedImageName
                    order by name
                ]) {
                // Display size of file in bytes, KB or MB
                string size;
                if (a.BodyLength < 1024)
                    size = a.BodyLength + ' bytes';
                else if (a.BodyLength < 1048576)
                    size = string.valueOf(((Decimal) a.BodyLength).divide(1024, 0, System.Roundingmode.HALF_UP)) + 'KB';
                else
                    size = string.valueOf(((Decimal) a.BodyLength).divide(1048576, 2, System.Roundingmode.HALF_UP)) + 'MB';
                // Add attachment item to list       
                AttachmentListItem attachItem = new AttachmentListItem(a.Id, a.Name, size, a.Description);
                attachments.add(attachItem);
                // Calculate total bytes
                total_attachments_size_in_bytes = total_attachments_size_in_bytes + a.BodyLength;
            }

            EmailAttachmentsExist = (!attachments.isEmpty());
            return attachments;
        }
    }

    public boolean EmailAttachmentsExist {
        get;
        set;
    }

    public boolean EmailAttachmentsDoNotExist {
        get {
            return (!EmailAttachmentsExist);
        }
    }

    public Id TempAttachmentParentId {
        get {
            return system.currentpageReference().getparameters().get('parentid');
        }
    }
    public Integer localAttachmentSize 
    { 
    get {
            Integer size = 0;
		    if(TempAttachmentParentId != null)
		    {
		        for(Attachment attachment:[SELECT BodyLength,Name,ParentId FROM Attachment WHERE ParentId =:TempAttachmentParentId ])
		        {
		            size += attachment.BodyLength;
		        }
		    }
    		return size;
        }
    }
    public void showSizeLimitInfoMessage()
	  {
	  	if(isPEorGE)
	  	{
	  		ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.INFO, 'Limitations in Professional & Group Edition of Salesforce do not allow files larger than 2 MB to be uploaded.'));
	  	}
	  	else
	  	{
	    	ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.INFO, 'Files cannot exceed the maximum size limit of 5MB.'));
	  	}
	  }

    public Id DeleteAttachmentID {
        get;
        set;
    }

    // Controller action methods
    public void GetNextParentId() {
        GetNextParentId(true);
    }
    public void GetNextParentId(boolean refresh_setting) {
        getAttachmentLocation(refresh_setting);
        Email_Client_Custom_Settings__c customUserSettings = Email_Client_Custom_Settings__c.getValues(UserInfo.getUserId());
        if ((customUserSettings != null) && (customUserSettings.Current_Temporary_Parent_Id__c != TempAttachmentParentId) ||
            (customUserSettings == null)) {
            EmailClientInitController.TemporaryParentProcesses(TempAttachmentParentId);
        }
    }

    private void GetDraftParams() {
        if (draft_params == null) {
            try {
                draft_params = [select Id, Name, Internal_Use__c
                    from Draft_Email__c
                    where Author__c =: UserInfo.getUserId()
                    and Internal_Use__c = true
                    order by Id DESC NULLS FIRST
                    limit 1
                ];
            } catch (Exception e) {
                draft_params = new Draft_Email__c();
            }
        }
    }

    public PageReference ProcessTemplateAndSaveParms() {
        PageReference result;
        if (page_parms_is_actioned == false) {
            if (TemplateIdParm != null)
                ValidateAndResolveTemplateParm();

            if (eObject.parameters.saveParm == '1' && ApexPages.hasMessages(ApexPages.Severity.WARNING) == false) {
                from_address_map = GetFromAddressMap();
                ApplyDefaultFromAddress();
                result = Send();
            }

            page_parms_is_actioned = true;
        }

        GetNextParentId(false);
        return result;
    }
    //To avoid showing invalid org wide address in from address
    @TestVisible
    private void processInvalidOrgWideEmails() 
    {
        if(oweas_validated) return;

        System.debug('processInvalidOrgWideEmails');
    	if (InvalidOWEs == null ||  InvalidOWEs.size() == 0) 
    	{
	        string invalid_owe_ids = EmailClientInitController.GetInvalidoweIdParam();
	        system.debug('invalid_parameters : ' + invalid_owe_ids);
			
	        InvalidOWEs = new Set < Id > ();
	        if (invalid_owe_ids != null) 
	        {
	            //string OweIds = system.currentpageReference().getparameters().get('invalidIds');
	            InvalidOWEs = new Set < Id > ();
	
	            string[] str = invalid_owe_ids.split(',');
	
	            for (string s: str) 
	            {
	                if (s != '' && s != null)
	                    InvalidOWEs.add(s.trim());
	            }
	        }
    	}
        oweas_validated = true;
    }

    public void ValidateAndResolveTemplateParm() {
        // Get template and notify of template preselection
        try {
            EmailTemplate t = [select Id, Name, TemplateType from EmailTemplate where Id =: TemplateIdParm and IsActive = true limit 1];
            TemplateLookupSelectedTemplateId = TemplateIdParm;
            TemplateLookupSelectedTemplateType = t.TemplateType;
            SelectEmailTemplate();
            InitSubject();

            // If template not found, display warning
        } catch (Exception e) {
            ApexPages.Message myMsg;
            myMsg = new ApexPages.Message(ApexPages.Severity.WARNING, 'An invalid or inactive template has been preselected. Template Id: ' + TemplateIdParm);
            ApexPages.addMessage(myMsg);
        }
    }
    private string getFromAddress(SObject original_custom_object) {
        if (original_custom_object.get('From_Address__c') != null) {
            return (string) original_custom_object.get('From_Address__c');
        }

        if (original_custom_object.get('New_From_Address__c') != null) {
            return (string) original_custom_object.get('New_From_Address__c');
        }

        return null;
    }
    @TestVisible
    private void EmailReplyAndForwardInit() {
        /*
         // Retrieve original email message
         try{
           reply_to_message = [select MessageDate, BccAddress, CcAddress, FromAddress, FromName, ToAddress, HasAttachment, HtmlBody, Subject, TextBody
                                                   from EmailMessage
                                                   where Id =:EmailIdParm];
         } catch (Exception e) { }
         */
        string previous_email_address;

        if (reply_to_message == null) 
        {
            // try loading data from custom object if possible
            SObject originalCustomObject = EmailClientInitController.GetCustomStorageEmailObject(eObject.previousEmailObject.previousEmailId) ;
            try {
                if (originalCustomObject != null) {
                    reply_to_message = new EmailMessageInternal();
                    reply_to_message.MessageDate = (DateTime) originalCustomObject.get('Message_Date__c');
                    reply_to_message.BccAddress = (string) originalCustomObject.get('Bcc_Address__c');
                    reply_to_message.CcAddress = (string) originalCustomObject.get('Cc_Address__c');
                    reply_to_message.FromAddress = getFromAddress(originalCustomObject); //(string) originalCustomObject.get( 'From_Address__c' );
                    reply_to_message.FromName = (string) originalCustomObject.get('From_Name__c');
                    reply_to_message.ToAddress = (string) originalCustomObject.get('To_Address__c');
                    reply_to_message.HasAttachment = (boolean) originalCustomObject.get('Has_Attachment__c');
                    reply_to_message.HtmlBody = (string) originalCustomObject.get('Html_Body__c');
                    reply_to_message.Subject = (string) originalCustomObject.get('Subject__c');
                    reply_to_message.Name = (string) originalCustomObject.get('Name');
                    reply_to_message.TextBody = (string) originalCustomObject.get('Text_Body__c');
                    reply_to_message.tags = (string) originalCustomObject.get('Tags__c');
                    reply_to_message.Incoming = (boolean) originalCustomObject.get('Incoming__c');
                    reply_to_message.headersAsText = (string) originalCustomObject.get('Headers__c');
                    reply_to_message.messageId = (string) originalCustomObject.get('Message_Id__c');

                    system.debug('html1:' + reply_to_message.HtmlBody);
                    if (reply_to_message.HtmlBody.contains('<xml>')) {
                        reply_to_message.HtmlBody = Utilities.cleanHTMLBody(reply_to_message.HtmlBody, '(?m)(?i)(<xml>.*?</xml>)');
                        system.debug('After cleaning message html body : ' + reply_to_message.HtmlBody);
                    }

                    //#943
                    previous_email_address = reply_to_message.Incoming ? reply_to_message.FromAddress : reply_to_message.ToAddress;

                    ToAddresses += (ToAddresses != '' && ToAddresses != null) ? SEMI_COLON + ' ' + previous_email_address : previous_email_address;

                }
            } catch (Exception e) {
                system.debug(LoggingLevel.error, 'exception while reading custom message ' + e);
            }
        }
        if (reply_to_message != null) {
            // Get string containing all available from-addresses
            string orgWideEmailAddressesString = GetAllOWEAs();
            // Get string containing all exclusion addresses
            string exclusionAddressesString = '';
            /*
              if (globalSettings.Reply_Exclusion_Addresses__c != null)
                 exclusionAddressesString = globalSettings.Reply_Exclusion_Addresses__c;
              */
            // Get original message to addresses
            List < string > origMsgToAddresses = Utilities.DelimitedStringToList(SEMI_COLON, reply_to_message.ToAddress);
            previous_email_address = reply_to_message.Incoming ? reply_to_message.FromAddress : reply_to_message.ToAddress;

            // If reply or reply to all and target parameter email address is found in original email from or to address,
            // then remove target email address from original to-address list and use target name, else if not found then no target
            boolean fromAddressIsTarget = false;
            string name = '';
            string targetEmail = '';
            if ((eObject.isEmailReply || eObject.isEmailReplyToAll) && !eObject.emailIsFromLead) 
            {
                Contact c = eObject.contactObject; //GetContactUsingId(eObject.parameters.targetIdParm);

                system.debug('reply_to_message.FromAddress' + reply_to_message.FromAddress);
                if (c == null)
                    c = GetContactUsingEmail(reply_to_message.FromAddress);
                if (c == null || HideToField == true) {
                    if (eObject.isEmailReply || eObject.isEmailReplyToAll) // fill to address from "From" address if it is blank and user is replying to email
                        ToAddresses += (ToAddresses != '' && ToAddresses != null) ? SEMI_COLON + ' ' + previous_email_address : previous_email_address;

                }
                if (c != null && HideToField == false) 
                {
                    name = c.Name;
                    targetEmail = c.Email;
                    system.debug('previous_email_address:' + previous_email_address);
                    system.debug('targetEmail:' + targetEmail);
                    if (targetEmail != null && previous_email_address != null && previous_email_address.contains(targetEmail)) // Check from adddress
                    {
                        if (HideToField) {
                            ToAddresses += (ToAddresses != null && ToAddresses != '') ? SEMI_COLON + ' ' + TargetEmail : TargetEmail;
                        } else {
                            TargetName = name;
                            TargetId = c.Id;
                        }
                        fromAddressIsTarget = true;
                    } else { // Else check if exists in to addresses, and remove if it does
                        for (integer i = 0; i < origMsgToAddresses.size(); i++) {
                            if (origMsgToAddresses.get(i) == targetEmail) {
                                origMsgToAddresses.remove(i);
                                TargetName = name;
                                break;
                            }
                        }
                    }
                }
            }

            // Set correct from-address as default
            string identifiedIncomingToAddress = '';
            for (string address: origMsgToAddresses) {
                if (orgWideEmailAddressesString.contains(address)) {
                    identifiedIncomingToAddress = address;
                    break;
                }
            }
            from_address_map = GetFromAddressMap();
            for (integer pos: from_address_map.keySet()) {
                FromAddressItem faItem = from_address_map.get(pos);
                system.debug('in reply:identifiedIncomingToAddress: ' + identifiedIncomingToAddress);
                system.debug('in reply:faitem.EmailAddress: ' + faitem.EmailAddress);
                if (identifiedIncomingToAddress == faitem.EmailAddress) {
                    FromAddress = string.valueOf(pos);
                    break;
                }
            }

            // If reply get local part address exclusion list
            Set < string > routingAddressLocalPartExclusion;
            if (eObject.isEmailReply || eObject.isEmailReplyToAll)
                routingAddressLocalPartExclusion = GetRoutingAddresses();

            // If reply and no target id then reply to email from-address
            if ((eObject.isEmailReply || eObject.isEmailReplyToAll) && (eObject.parameters.targetIdParm == null)) {
                // Omit from address if in exclusion list, OWEAs or matches local part of routing addresses
                string origMsgFromAddress = reply_to_message.FromAddress;
                string localPart = '';
                if (origMsgFromAddress == null) {
                    origMsgFromAddress = '';
                }
                try {
                    localPart = origMsgFromAddress.substring(0, origMsgFromAddress.indexOf('@'));
                } catch (Exception e) {}
                //system.debug('Null Argument Exception  ... '+routingAddressLocalPartExclusion+' : '+localPart+' : '+ exclusionAddressesString+' : '+origMsgFromAddress+' : '+orgWideEmailAddressesString+' : ');
                origMsgFromAddress = (origMsgFromAddress == null) ? '' : origMsgFromAddress;
                localPart = (localPart == null) ? '' : localPart;

                if ((!exclusionAddressesString.contains(origMsgFromAddress)) &&
                    (!routingAddressLocalPartExclusion.contains(localPart))) {
                    ToAddresses = previous_email_address; //reply_to_message.FromAddress;
                }

            }

            // If reply to all
            if (eObject.isEmailReplyToAll) {
                // Set To Addresses to valid reply addresses (omitting excluded addresses)
                List < string > replyToAddresses = Utilities.DelimitedStringToList(SEMI_COLON, ToAddresses);

                List < string > potentialReplyToAllAddresses = new List < string > ();
                if (!fromAddressIsTarget)
                    potentialReplyToAllAddresses.add(reply_to_message.FromAddress);
                potentialReplyToAllAddresses.addAll(origMsgToAddresses);
                for (string address: potentialReplyToAllAddresses) {
                    // Omit addresses in exclusion list, OWEAs and those matching local part of routing addresses
                    string localPart = '';
                    try {
                        localPart = address.substring(0, address.indexOf('@'));
                    } catch (Exception e) {}
                    address = (address == null) ? '' : address;
                    localPart = (localPart == null) ? '' : localPart;

                    if ((!exclusionAddressesString.contains(address)) &&
                        (!routingAddressLocalPartExclusion.contains(localPart))) {
                        replyToAddresses.add(address);
                    }

                }
                if (!replyToAddresses.isEmpty()) {
                    set < string > unique = new Set < string > (replyToAddresses);
                    replyToAddresses.clear();
                    replyToAddresses.addAll(unique);
                    ToAddresses = Utilities.ListToDelimitedString(SEMI_COLON, replyToAddresses);
                }

                // Set Cc Addresses to valid reply addresses (omitting excluded addresses)
                List < string > origMsgCcAddresses = Utilities.DelimitedStringToList(SEMI_COLON, reply_to_message.CcAddress);
                List < string > replyCcAddresses = new List < string > ();
                for (string address: origMsgCcAddresses) {
                    // Omit addresses in exclusion list, OWEAs and those matching local part of routing addresses
                    string localPart = '';
                    try {
                        localPart = address.substring(0, address.indexOf('@'));
                    } catch (Exception e) {}

                    if ((!exclusionAddressesString.contains(address)) &&
                        (!routingAddressLocalPartExclusion.contains(localPart))) {
                        replyCcAddresses.add(address);
                    }
                }
                if (!replyCcAddresses.isEmpty()) {
                    set < string > unique = new Set < string > (replyCcAddresses);
                    replyCcAddresses.clear();
                    replyCcAddresses.addAll(unique);
                    CcAddresses = Utilities.ListToDelimitedString(SEMI_COLON, replyCcAddresses);
                }
            }

            // Set subject & Name
            Name = reply_to_message.Name;
            string origSubject = reply_to_message.Subject;
            if (origSubject == null)
                origSubject = '';
            Subject = origSubject;
            //system.debug(str.length());
            if (origSubject != '' && origSubject.length() > 2) {
                if (origSubject.substring(0, 3).toUpperCase() == 'FWD') {
                    if (origSubject.length() >= 5) {
                        origSubject = origSubject.substring(5);
                    } else {
                        origSubject = '';
                    }
                } else if (origSubject.substring(0, 3).toUpperCase() == 'RE:' || origSubject.substring(0, 3).toUpperCase() == 'FW:') {
                    if (origSubject.length() >= 4) {
                        origSubject = origSubject.substring(4);
                    } else {
                        origSubject = '';
                    }
                }
            }

            if ((eObject.isEmailReply || eObject.isEmailReplyToAll) && (!origSubject.toUpperCase().startsWith('RE:'))) {
                Subject = 'RE: ' + origSubject;
                Name = 'RE: ' + reply_to_message.Name;
            }
            if (eObject.isEmailForward && (!origSubject.startsWith('FW:'))) {
                subject = 'FW: ' + origSubject;
                Name = 'FW: ' + reply_to_message.Name;

                ToAddresses = '';
            }
            // Set body
            Body = OriginalTextHeader(reply_to_message);
            //validate null 
            leadEmial = leadEmial == null ? '' : leadEmial;
            targetEmail = targetEmail == null ? '' : targetEmail;

            // Removing duplicate email addresses 
            if (ToAddresses != null && ToAddresses != '') {
                ToAddresses = removeDuplicateAddresses(ToAddresses, SEMI_COLON, leadEmial);
                ToAddresses = removeDuplicateAddresses(ToAddresses, SEMI_COLON, targetEmail);
            }
            if (CcAddresses != null && CcAddresses != '') {
                CcAddresses = removeDuplicateAddresses(CcAddresses, SEMI_COLON, '');
            }
            if (BccAddresses != null && BccAddresses != '') {
                BccAddresses = removeDuplicateAddresses(BccAddresses, SEMI_COLON, '');
            }
        }
    }

    private string removeDuplicateAddresses(String email_addresses, String delimiter, string target_email) {
        string result = '';

        try {
            for (string to_address: Utilities.DelimitedStringToList(SEMI_COLON, email_addresses)) {
                if (result.contains(to_address)) {
                    continue;
                }
                if (result != '') {
                    result += delimiter + ' ';
                }
                if (target_email != to_address && !HideToField) {
                    result += to_address;
                } else if (HideToField) {
                    result += to_address;
                }
            }
        } catch (Exception ex) {
            System.debug('Error : ' + ex.getMessage());
        }
        return result;
    }

    private string GetAllOWEAs() {
        string result = '';
        system.debug('in get All:' + InvalidOWEs);
        InvalidOWEs = (InvalidOWEs == null) ? new Set < Id > () : InvalidOWEs;
        try {
            for (OrgWideEmailAddress owea: [select Address, DisplayName
                    from OrgWideEmailAddress
                    //where IsAllowAllProfiles = true
                    where Id NOT IN: InvalidOWEs
                ]) {
                if (result == '')
                    result = result + owea.Address;
                else
                    result = result + SEMI_COLON + owea.Address;
            }
        } catch (Exception e) {}
        return result;
    }

    private Set < string > GetRoutingAddresses() {
        Set < string > result = new Set < string > ();

        for (EmailServicesAddress esa: [select LocalPart, IsActive
                from EmailServicesAddress
                where IsActive = true
            ]) {
            if (!result.contains(esa.LocalPart))
                result.add(esa.LocalPart);
        }
        return result;
    }

    private string OriginalTextHeader(EmailMessageInternal emailMessageIn) {
        string result = '';
        string lineBreak = CR_LF;
        string boldTagOpen = '<strong>';
        string boldTagClose = '</strong>';

        if (is_rich_text)
            lineBreak = HTML_BREAK;

        result = lineBreak + lineBreak + lineBreak + '--------------- Original Message ---------------' + lineBreak;
        if (is_rich_text)
            result = result + boldTagOpen;
        result = result + 'From: ';
        if (is_rich_text)
            result = result + boldTagClose;
        result = result + emailMessageIn.FromName + ' [' + emailMessageIn.FromAddress + '] ' + lineBreak;
        if (is_rich_text)
            result = result + boldTagOpen;
        result = result + 'Sent: ';
        if (is_rich_text)
            result = result + boldTagClose;
        DateTime createdDate = emailMessageIn.MessageDate;
        if (createdDate != null) {
            result = result + createdDate.format() + lineBreak;
        }
        if (is_rich_text)
            result = result + boldTagOpen;
        result = result + 'To: ';
        if (is_rich_text)
            result = result + boldTagClose;
        result = result + emailMessageIn.ToAddress + lineBreak;
        if (emailMessageIn.CcAddress != null) {
            if (is_rich_text)
                result = result + boldTagOpen;
            result = result + 'Cc: ';
            if (is_rich_text)
                result = result + boldTagClose;
            result = result + emailMessageIn.CcAddress + lineBreak;
        }
        if (is_rich_text)
            result = result + boldTagOpen;
        result = result + 'Subject: ';
        if (is_rich_text)
            result = result + boldTagClose;
        string origSubject = '';
        if (emailMessageIn.Subject != null)
            origSubject = emailMessageIn.Subject;
        result = result + origSubject + lineBreak;

        if (is_rich_text && (emailMessageIn.HtmlBody != null)) {
            // Remove existing html, head, body and meta tags from original html email text
            string newBody = emailMessageIn.HtmlBody;
            string resultBody = Utilities.RemoveHTMLTagFromString('<html>', false, 1, newBody);
            if (resultBody != null)
                newBody = resultBody;
            resultBody = Utilities.RemoveHTMLTagFromString('<head>', true, 1, newBody);
            if (resultBody != null)
                newBody = resultBody;
            resultBody = Utilities.RemoveHTMLTagFromString('<style>', true, 1, newBody);
            if (resultBody != null)
                newBody = resultBody;
            resultBody = Utilities.RemoveHTMLTagFromString('<body>', false, 1, newBody);
            if (resultBody != null)
                newBody = resultBody;
            if (newBody.contains('<meta'))
                newBody = newBody.replaceAll('<(meta|META)\\b[^<^>]*>', '');

            newBody = Utilities.FormatSpanTags(newBody);
            //result = result + emailMessageIn.HtmlBody;
            result = result + newBody;
            system.debug('emailMessageIn.HtmlBody    : ' + newBody);
        } else if (emailMessageIn.TextBody != null) {
            if (is_rich_text)
                result = result + Utilities.ReplaceCRLFWithHtmlBR(emailMessageIn.TextBody);
            else
                result = result + emailMessageIn.TextBody;
        }

        // Drop text over 70000 characters long
        if (result.length() > 70000) {
            result = result.substring(0, 70000);
        }
        return result;
    }

	public Map<string, integer> key_fromAddressPositionMap {get;set;}

    private Map < integer, FromAddressItem > GetFromAddressMap() {
        Map < integer, FromAddressItem > fromAddressMap = new Map < integer, FromAddressItem > ();
        key_fromAddressPositionMap = new Map<string, integer>();
        
        FromAddressItem newFromAddressItem;
        integer position = 0;

        system.debug('invalid org :' + InvalidOWEs);
        // Get current user email address(es) if allowed
        if ((BusinessUnitIsSelected && businessUnit.User_From_Address_Allowed__c) || (!BusinessUnitIsSelected)) //businessUnit.Allow_User_From_Address__c) || (!BusinessUnitIsSelected))
        {
            // Get first user from-address
            newFromAddressItem = new FromAddressItem('user', UserInfo.getUserEmail(), UserInfo.getName());
            fromAddressMap.put(position, newFromAddressItem);
            key_fromAddressPositionMap.put('user',position);
            key_fromAddressPositionMap.put(UserInfo.getUserEmail(),position);
            key_fromAddressPositionMap.put( UserInfo.getName(),position);
            position = position + 1;

            // Get second/alternate user from-address
            if ((userSettings.EC_Sender_Name__c != UserInfo.getName()) || (userSettings.EC_Email_Address__c != UserInfo.getUserEmail())) {
                newFromAddressItem = new FromAddressItem('user-alt', userSettings.EC_Email_Address__c, userSettings.EC_Sender_Name__c); /*, userSettings.Email_Name__c);*/
                fromAddressMap.put(position, newFromAddressItem);
                key_fromAddressPositionMap.put('user-alt',position);
                key_fromAddressPositionMap.put(userSettings.EC_Email_Address__c,position);
                key_fromAddressPositionMap.put(userSettings.EC_Sender_Name__c,position);
                position = position + 1;
            }
        }

        // If a business unit is selected and only selective from-addresses allowed...
        InvalidOWEs = (InvalidOWEs == null) ? new Set < Id > () : InvalidOWEs;
        if (  BusinessUnitIsSelected && !businessUnit.Allow_All_From_Addresses__c ) 
        {
            for (OrgWideEmailAddress owe: [select Address, DisplayName
                    from OrgWideEmailAddress
                    //where IsAllowAllProfiles = true and Id in :businessUnitAllowedOWEAs
                    where Id NOT IN: InvalidOWEs and Id in: businessUnitAllowedOWEAs
                    order by DisplayName
                ]) {
                newFromAddressItem = new FromAddressItem('owea', owe.Address, owe.DisplayName, owe.Id);
                fromAddressMap.put(position, newFromAddressItem);
                key_fromAddressPositionMap.put(owe.Id, position);
                key_fromAddressPositionMap.put(owe.Address, position );
                key_fromAddressPositionMap.put(owe.DisplayName, position);
                position = position + 1;
            }
        } else if (globalSettings.EC_Restrict_From_Addresses__c == false || BusinessUnitIsSelected) // else get all from-addresses if not restricted
        {
            for (OrgWideEmailAddress owe: [select Id, Address, DisplayName
                    from OrgWideEmailAddress
                    //where IsAllowAllProfiles = true
                    where Id NOT IN: InvalidOWEs
                    order by DisplayName
                ]) {
                newFromAddressItem = new FromAddressItem('owea', owe.Address, owe.DisplayName, owe.Id);
                fromAddressMap.put(position, newFromAddressItem);
                key_fromAddressPositionMap.put(owe.Id, position);
                key_fromAddressPositionMap.put(owe.Address, position );
                key_fromAddressPositionMap.put(owe.DisplayName, position);
                position = position + 1;
            }
        } else if (globalSettings.EC_Restrict_From_Addresses__c == true && (eObject.isEmailReply || eObject.isEmailReplyToAll || eObject.IsEmailForward)) // else if restricted and a reply or forward
        {
            string origMessageToAddressString = reply_to_message.ToAddress;
            for (OrgWideEmailAddress owe: [select Id, Address, DisplayName
                    from OrgWideEmailAddress
                    where Id NOT IN: InvalidOWEs
                    //where IsAllowAllProfiles = true
                ]) {
                if (origMessageToAddressString.contains(owe.Address)) {
                    newFromAddressItem = new FromAddressItem('owea', owe.Address, owe.DisplayName, owe.Id);
                    fromAddressMap.put(position, newFromAddressItem);
                    key_fromAddressPositionMap.put(owe.Id, position);
	                key_fromAddressPositionMap.put(owe.Address, position );
	                key_fromAddressPositionMap.put(owe.DisplayName, position);
                    break;
                }
            }
        }


        return fromAddressMap;
    }

    private Contact GetContactUsingId(Id idIn) {
        Contact c = null;
        List < Contact > cList = new List < Contact > ();
        cList = [select Id, Name, Email from Contact where id =: idIn limit 1];
        if (cList.size() > 0)
            c = cList.get(0);
        return c;
    }

    private Contact GetContactUsingName(string nameIn) {
        Contact c = null;
        List < Contact > cList = new List < Contact > ();
        cList = [select Id, Name, Email from Contact where Name =: nameIn limit 1];
        if (cList.size() > 0)
            c = cList.get(0);
        return c;
    }

    private Contact GetContactUsingEmail(string emailIn) {
        Contact c = null;
        List < Contact > cList = new List < Contact > ();
        cList = [select Id, Name, Email from Contact where Email =: emailIn limit 1];
        if (cList.size() > 0)
            c = cList.get(0);
        return c;
    }

    private Lead GetLeadUsingId(Id idIn) {
        Lead l = null;
        List < Lead > lList = new List < Lead > ();
        lList = [select Id, Name, Email from Lead where id =: idIn limit 1];
        if (lList.size() > 0)
            l = lList.get(0);
        return l;
    }

    @TestVisible
    private Lead GetLeadUsingName(string nameIn) {
        Lead l = null;
        List < Lead > lList = new List < Lead > ();
        lList = [select Id, Name, Email from Lead where Name =: nameIn limit 1];
        if (lList.size() > 0)
            l = lList.get(0);
        return l;
    }

    private string GetTargetNameUsingId(Id idIn) {
        string name = '';
        if (eObject.emailIsFromLead) {
            lead l = GetLeadUsingId(idIn);
            if (l != null)
                name = l.Name;
        } else {
            Contact c = GetContactUsingId(idIn);
            if (c != null)
                name = c.Name;
        }

        return name;
    }

    @TestVisible
    private string GetTargetNameEmailUsingId(Id idIn) {
        string email = '';
        if (eObject.emailIsFromLead) {
            lead l = GetLeadUsingId(idIn);
            if (l != null)
                email = l.email;
        } else if (eObject.emailIsFromContact) {
            Contact c = GetContactUsingId(idIn);
            if (c != null)
                email = c.Email;
        }

        return email;
    }

    private Id GetTargetIdUsingName(string nameIn) {
        Id targetId = null;
        if (eObject.emailIsFromLead) {
            Lead l = GetLeadUsingName(nameIn);
            if (l != null)
                targetId = l.Id;
        } else {
            Contact c = GetContactUsingName(nameIn);
            if (c != null)
                targetId = c.Id;
        }

        return targetId;
    }

    private boolean TargetNameIsValid(string nameIn) {
        boolean result = false;
        integer count;
        if (eObject.emailIsFromLead)
            count = [select count() from Lead where Name =: nameIn limit 1];
        else
            count = [select count() from Contact where Name =: nameIn limit 1];
        if (count == 1)
            result = true;
        return result;
    }

    private boolean RelatedObjectPrefixIsValid() {
        boolean result = false;
        try {
            if (eObject.relatedObject.relatedObjectId != null) 
            {
                if (RELATED_STDOBJ_PREFIX.contains(eObject.relatedObject.relatedObjectkeyPrefix) || eObject.relatedObject.relatedObjectAPIName.endsWith('__c'))
                    result = true;
            }
        } catch (Exception e) {}

        return result;
    }

    private string GetRelatedObjectRecordNameNumber() {
        string result = '';

        //Schema.DescribeSObjectResult sor = SfUtilities.getSObjectDescriptionById(eObject.relatedObject.relatedObjectId);
        string related_object_api_name = eObject.relatedObject.relatedObjectAPIName;
        Schema.DescribeFieldResult fr = SfUtilities.GetSObjectNameNbrFieldDescriptionById(eObject.relatedObject.relatedObjectId);

        if (fr != null && related_object_api_name != null && related_object_api_name != '') {
            // Build select string to query 
            string soqlString = 'Select ' + string.escapeSingleQuotes(fr.getName()) + ' from ' + string.escapeSingleQuotes(related_object_api_name) +
                ' where id = \'' + eObject.relatedObject.relatedObjectId + '\'  limit 1';
            try {
                sObject s = Database.query(soqlString);
                Object fieldNameNumber = s.get(string.escapeSingleQuotes(fr.getName()));
                result = (string) fieldNameNumber;
            } catch (Exception e) {}
        }
        return result;
    }
    private string RelatedObjectRecordName(string RelatedToSObjectName, string RelatedToSObjectPrefix, string RelatedSobjectId) {
        string RecordName = '';
        Schema.DescribeSObjectResult sor = SfUtilities.getSObjectDescriptionById(RelatedSobjectId);
        Schema.DescribeFieldResult fr = SfUtilities.GetSObjectNameNbrFieldDescriptionById(RelatedSobjectId);

        if (fr != null && sor != null) {
            // Build select string to query 
            string soqlString = 'Select ' + string.escapeSingleQuotes(fr.getName()) + ' from ' + string.escapeSingleQuotes(sor.getName()) +
                ' where Id=\'' + string.escapeSingleQuotes(RelatedSobjectId) + '\' limit 1';
            try {
                sObject s = Database.query(soqlString);
                if (s != null) {
                    Object ObjRecordName = s.get(string.escapeSingleQuotes(fr.getName()));
                    RecordName = string.valueOf(ObjRecordName);
                }
            } catch (Exception e) {}
        }

        return RecordName;
    }

    private boolean RelatedObjectRecordNameNumberIsValid() {
        boolean result = false;

        // Blank name/number is valid
        if (RelatedToSObjectName == '') {
            result = true;
            // Set saved related object id to null
            related_obj_id = null;
        }
        // else if not blank validate name/number against 
        else {
            if (RelatedToSObjectId != null) {
                related_obj_id = RelatedToSObjectId;
                result = true;
            }
        }

        return result;
    }

    public void SelectEmailTemplate() {
        system.debug('Select Email Template !');

        // Validate related object name/number
        if (!RelatedObjectRecordNameNumberIsValid()) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Related object name/number is invalid');
            ApexPages.addMessage(myMsg);
        } else {
            system.debug('TemplateLookupSelectedTemplateType: ' + TemplateLookupSelectedTemplateType);
            if (TemplateLookupSelectedTemplateType == 'text') {
            	is_rich_text = false;
                ResolveTextTemplate();
            } else if (TemplateLookupSelectedTemplateType == 'visualforce') {
                ResolveVisualforceTemplate();

            } else {
                ResolveNonTextTemplate();
            }

        }
        system.currentpageReference().getParameters().put('isrichtext', string.valueOf(is_rich_text));
        saveTags();
    }

    private void ResolveTextTemplate() {
        EmailTemplateUtility.ResolvedTemplate resolvedTemplate = new EmailTemplateUtility.ResolvedTemplate();
        // Set what and who id. If no related object (leads and contacts) who becomes the what id
        string whatId;
        string whoId;
        if (related_obj_id != null) {
            whatId = related_obj_id;
            whoId = TargetId; //GetTargetIdUsingName(TargetName);
        } else {
            whatId = TargetId; //GetTargetIdUsingName(TargetName);
        }

        Id BUId = (BusinessUnitId != '' && BusinessUnitId != 'none') ? BusinessUnitId : null;
        if (EmailTemplateUtility.renderMergeFields(is_rich_text,
                TemplateLookupSelectedTemplateId,
                whatId,
                whoId,
                eObject.previousEmailObject.previousEmailId,
                BUId,
                resolvedTemplate)) {
            Subject = resolvedTemplate.Subject;

            if (is_rich_text) {
                Body = resolvedTemplate.Body.escapeHtml4();
                Body = Body.replaceAll('&lt;br/&gt;', '<br/>');
                Body = Body.replaceAll('&lt;BR/&gt;', '<BR/>');
                Body = Body.replaceAll('&lt;BR&gt;', '<BR>');
                Body = Body.replaceAll('&lt;br&gt;', '<br>');

                Body = Body.replaceAll('&nbsp;', ' ');
                Body = Body.replaceAll('&amp;', '&');
                Body = Body.replaceAll('&quot;', '"');
                Body = Body.replaceAll('&lt;', '<');
                Body = Body.replaceAll('&gt;', '>');
            } else {
                Body = resolvedTemplate.Body;
                Body = Body.replaceAll('<br/>', '\r\n');
                Body = Body.replaceAll('<BR/>', '\r\n');
                Body = Body.replaceAll('<BR>', '\r\n');
                Body = Body.replaceAll('<br>', '\r\n');
            }

            system.debug('Body: ' + Body);
            // Delete any existing template attachments
            List < Attachment > existingAttachments = [select Name
                from Attachment
                where ParentId =: TempAttachmentParentId and(Description = 'TEMPLATE-TOSEND'
                    or Description = 'TEMPLATE-FORINFO')
            ];
            if (!existingAttachments.isEmpty())
                ObjectAndFieldAccess.DeleteSObject( existingAttachments);
            // If template attachments returned, add to email
            if (!resolvedTemplate.TemplateAttachments.isEmpty()) {
                List < Attachment > newTempAttachments = new List < Attachment > ();
                for (Attachment a: resolvedTemplate.TemplateAttachments) {
                    newTempAttachments.add(new Attachment(Name = a.Name, Body = a.Body, ContentType = a.ContentType, ParentId = TempAttachmentParentId, Description = 'TEMPLATE-TOSEND'));
                }
                if (!newTempAttachments.isEmpty()) {
                    ObjectAndFieldAccess.InsertSObject(newTempAttachments);
                    GetNextParentId(true); // Attachment added, therefore get next parent id
                }
            }

            //ShowBody = true;
            template_frame_is_active = false;
        } else {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Error Loading Merge Fields in the Template');
            ApexPages.addMessage(myMsg);
        }
    }

    private void ResolveNonTextTemplate() {
        try {
            EmailTemplate template = [select Id, BrandTemplateId, Subject, TemplateType, HtmlValue from EmailTemplate where Id =: TemplateLookupSelectedTemplateId];

            BrandTemplate BT = new BrandTemplate();
            string BTValue = '';
            if (template.BrandTemplateId != null) {
                BT = [Select Value, Name, Id, Description From BrandTemplate where id =: template.BrandTemplateId];
                BTValue = BT.Value;
            }
            system.debug('BTValue  :' + BTValue);

            EmailTemplateUtility.ResolvedTemplate resolvedTemplate = new EmailTemplateUtility.ResolvedTemplate();
            // Set what and who id. If no related object (leads and contacts) who becomes the what id
            string whatId;
            string whoId;
            if (related_obj_id != null) {
                whatId = related_obj_id;
                whoId = TargetId; //GetTargetIdUsingName(TargetName);
            } else {
                whatId = TargetId; //GetTargetIdUsingName(TargetName);
            }
            Id BUId = (BusinessUnitId != '' && BusinessUnitId != 'none') ? BusinessUnitId : null;
            if (EmailTemplateUtility.renderMergeFields(is_rich_text,
                    TemplateLookupSelectedTemplateId,
                    whatId,
                    whoId,
                    eObject.previousEmailObject.previousEmailId,
                    BUId,
                    resolvedTemplate)) {
                Subject = resolvedTemplate.Subject;
                Body = resolvedTemplate.Body;

                if (!is_rich_text) {
                    Body = Body.replaceAll('<br/>', '\r\n');
                    Body = Body.replaceAll('<BR/>', '\r\n');
                    Body = Body.replaceAll('<BR>', '\r\n');
                    Body = Body.replaceAll('<br>', '\r\n');
                }
            } else {
                ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Error Loading Merge Fields in the Template');
                ApexPages.addMessage(myMsg);
            }
            system.debug('Body in Resolve non text: ' + Body);
            // Delete any existing template attachments
            List < Attachment > existingAttachments = [select Name from Attachment
                where ParentId =: TempAttachmentParentId and(Description = 'TEMPLATE-TOSEND'
                    or Description = 'TEMPLATE-FORINFO')
            ];
            if (!existingAttachments.isEmpty())
                ObjectAndFieldAccess.DeleteSObject( existingAttachments);
            // If attachments exist for this template, then get for informational purposes
            List < Attachment > newTempAttachments = new List < Attachment > ();
            for (Attachment a: resolvedTemplate.TemplateAttachments) //[select Id, Name, Body, ContentType
            //from Attachment 
            //where IsDeleted = false and ParentId = :TemplateLookupSelectedTemplateId])
            {
                newTempAttachments.add(new Attachment(Name = a.Name, Body = a.Body, ContentType = a.ContentType, ParentId = TempAttachmentParentId, Description = 'TEMPLATE-FORINFO'));
            }
            if (!newTempAttachments.isEmpty()) {
                ObjectAndFieldAccess.InsertSObject(newTempAttachments);
                GetNextParentId(true); // Attachment added, therefore get next parent id
            }

            // Build url parms for iframe
            PageReference templateFramePageRef = new PageReference('/email/author/emailauthorframe.jsp');
            templateFramePageRef.getParameters().put('email_type', TemplateLookupSelectedTemplateType);
            templateFramePageRef.getParameters().put('template_id', TemplateLookupSelectedTemplateId);
            if (TargetName != '' && TargetName != null)
                templateFramePageRef.getParameters().put('p2_lkid', GetTargetIdUsingName(TargetName));
            if (related_obj_id != null)
                templateFramePageRef.getParameters().put('p3_lkid', related_obj_id);
            templateFramePageRef.getParameters().put('preview', '1');

            TemplateFrameUrl = EncodingUtil.urlEncode(templateFramePageRef.getUrl(), 'UTF-8');

            Body = Utilities.cleanHTMLBody(Body, '(?i)(<br>)');
            system.debug('clean HTML Body: ' + Body);
            //ShowBody = false;
            template_frame_is_active = true;
        } catch (Exception e) {
            system.debug('Error Loading Template: ' + e.getMessage());
        }
    }
    private void ResolveVisualforceTemplate() {
        string what_id = null;
        string who_id = null;
        if (related_obj_id != null) {
            what_id = related_obj_id;
            who_id = TargetId;
        } else {
            what_id = TargetId;
        }
        try {
            system.debug('what_id:' + what_id + 'who_id' + who_id);
            Messaging.SingleEmailMessage email = Messaging.renderStoredEmailTemplate(TemplateLookupSelectedTemplateId, who_id, what_id);
            Subject = email.getSubject();
            if (!is_rich_text) {
                Body = email.getPlainTextBody();
            } else {
                Body = email.getHTMLBody();
            }
            List < Attachment > existing_attachments = [select Name from Attachment
                where ParentId =: TempAttachmentParentId and(Description = 'TEMPLATE-TOSEND'
                    or Description = 'TEMPLATE-FORINFO')
            ];
            if (!existing_attachments.isEmpty()) {
                ObjectAndFieldAccess.DeleteSObject( existing_attachments);
            }
            List < Attachment > new_temp_attachments = new List < Attachment > ();
            for (Attachment a: getAttachmentFromVisualforceTemplate()) {
                new_temp_attachments.add(new Attachment(Name = a.Name, Body = a.Body, ContentType = a.ContentType, ParentId = TempAttachmentParentId, Description = 'TEMPLATE-FORINFO'));
            }
            if (!new_temp_attachments.isEmpty()) {
                ObjectAndFieldAccess.InsertSObject(new_temp_attachments);
                GetNextParentId(true);
            }
        } catch (Exception ex) {
            system.debug('Error Loading Template: ' + ex.getMessage());
        }

    }

    private List < Attachment > getAttachmentFromVisualforceTemplate() {
        List < Attachment > template_attachment = new List < Attachment > ();
        List < Id > parent_Ids = new List < Id > ();
        parent_Ids.add(TemplateLookupSelectedTemplateId);
        for (Attachment a: [select Id, Name, Body, ContentType from Attachment where IsDeleted = false and ParentId in: parent_Ids])

        {
            template_attachment.add(new Attachment(Name = a.Name, Body = a.Body, ContentType = a.ContentType, ParentId = null));
        }
        return template_attachment;
    }

    private void ApplyDefaultFromAddress() {

        string FromEmailAddress = '';

        // Set default email from-address
        if (FromAddress == null)
            FromAddress = '';

        system.debug('eObject.p26Parm: ' + eObject.parameters.p26Parm);
        system.debug('from_address_parm_is_done: ' + from_address_parm_is_done);
        // If url query parm given, attempt to default from address
        if (eObject.parameters.p26Parm != null && from_address_parm_is_done == false) 
        {
            integer position = key_fromAddressPositionMap.get(eObject.parameters.p26Parm); //displayname or email address or owe Id
            FromAddressItem faItem = from_address_map.get(position);
            if(faItem != null)
            {
                FromAddress = string.valueOf(position);
                FromEmailAddress = faItem.EmailAddress;
            }
            
            from_address_parm_is_done = true;
        }

        system.debug('FromAddress before if: ' + FromAddress);

        // If default not applied from url query parm then attempt setting the following defaults
        if (FromAddress == '' || FromAddress == '0') {

            // If business unit selected and a default email address specified then set default by
            // placing correct from_address_map position into FromAddress
            system.debug('BusinessUnitIsSelected: ' + BusinessUnitIsSelected);
            //system.debug('businessUnit.Default_OWEA_Id__c: '+businessUnit.Default_OWEA_Id__c);
            system.debug('userSettings.EC_Default_From_Address_Type__c: ' + userSettings.EC_Default_From_Address_Type__c);
            if (BusinessUnitIsSelected && businessUnit.Default_OWEA_Id__c != 'none') //OWEA_Id__c != 'none')
            {
                try {

                    OrgWideEmailAddress owea = [select Id from OrgWideEmailAddress where Id =: businessUnit.Default_OWEA_Id__c]; //OWEA_Id__c];
                   
                    integer position = key_fromAddressPositionMap.get(owea.Id);
                    FromAddressItem faItem = from_address_map.get(position);
                    if(faItem != null)
                    {
	                    FromAddress = string.valueOf(position);
	                    FromEmailAddress = faItem.EmailAddress;
                    }
                    
                } catch (Exception e) {}
            }
            // Else if user settings has an owea default email address specified then set default as above
            else if (userSettings.EC_Default_From_Address_Type__c == 'owea') {
                system.debug('in owea: ');

                integer position = key_fromAddressPositionMap.get(userSettings.EC_OWEA_Id__c);
                system.debug('position: '+position);
                FromAddressItem faItem = from_address_map.get(position);
                system.debug('faItem: '+faItem);
                if(faItem != null)
                {
	                FromAddress = string.valueOf(position);
	                FromEmailAddress = faItem.EmailAddress;
                }
            }

            // Else if user settings has an user default email address specified then set default as above

            //else if (userSettings.Default_From_Address_Type__c == 'user' || userSettings.Default_From_Address_Type__c == 'user-alt')
            else if (userSettings.EC_Default_From_Address_Type__c == 'user' || userSettings.EC_Default_From_Address_Type__c == 'user-alt') 
            {
                integer position = key_fromAddressPositionMap.get(userSettings.EC_Default_From_Address_Type__c);
                FromAddressItem faItem = from_address_map.get(position);
                if(faItem != null)
                {
	                FromAddress = string.valueOf(position);
	                FromEmailAddress = faItem.EmailAddress;
                }
                
            }

        }

        system.debug('FromAddress after all: ' + FromAddress);
        system.debug('FromEmailAddress after all: ' + FromEmailAddress);

        // If no default applied then set to zero (i.e. first option in list)
        if (FromAddress == '')
            FromAddress = '0';

        /* Commented by MS to work with business unit
        //assign default address from user settings
        if(userSettings.EC_Default_From_Address_Type__c == 'user-alt')  
        FromAddress = '1';
        if(userSettings.EC_Default_From_Address_Type__c == 'owea')
        {
            //Get default OWEA from user settings object
            
            try{
                OrgWideEmailAddress defaultowea = [ select Address, DisplayName from OrgWideEmailAddress 
                                                    where Id = :userSettings.EC_OWEA_Id__c ];
            
                for (integer pos : from_address_map.keySet())
                {
                    //check if address from OWEA match default email 
                    if(from_address_map.get(pos).EmailAddress == defaultowea.Address)
                    FromAddress = string.ValueOf(pos);
                }
            }catch(exception ex){}
            
        }*/
    }

    public boolean emailToSelf {
        get;
        set;
    }
    public void ValidatingIfEmailSendingToSelf() 
    {
        emailToSelf = false;
        if (eObject.isEmailReply || eObject.isEmailReplyToAll) 
        {
            string from_email_address = '';

            FromAddressItem selectedFromAddress = from_address_map.get(integer.valueOf(FromAddress));
            from_email_address = selectedFromAddress.EmailAddress;

            //get to address
            string to_email_address = '';
            boolean target_has_email = false;

            system.debug('TargetName: ' + TargetName);

            if (TargetName != null && TargetName.trim() != '' && HideToField == false) 
            {
                system.debug(TargetId + 'In TargetName: ' + TargetName);
                if (eObject.emailIsFromLead)
                {
                    Lead temp_lead = GetLeadUsingId(TargetId);
                    to_email_address = temp_lead != null ? temp_lead.email : '';
                } 
                else if (eObject.emailIsFromContact) 
                {
                    Contact temp_contact = GetContactUsingId(TargetId);
                    to_email_address = temp_contact != null ? temp_contact.email : '';
                }

                if (to_email_address != '') {
                    target_has_email = true;
                }
            } 
            else 
            {
                //check if to is only one and self email
                List < string > toAddressesList = new List < string > ();
                system.debug('In ToAddresses: ' + ToAddresses);
                if (ToAddresses != '') {
                    toAddressesList.addAll(Utilities.DelimitedStringToList(SEMI_COLON, ToAddresses));
                    system.debug('In toAddressesList: ' + toAddressesList);

                    if (toAddressesList.size() == 1) {
                        to_email_address = toAddressesList[0];
                    }
                }

            }


            system.debug('to_email_address: ' + to_email_address + ' : from_email_address: ' + from_email_address);

            if (to_email_address.trim() != '' && from_email_address.trim() != '' && to_email_address == from_email_address) {
                if (CcAddresses.trim() == '' && ((target_has_email && ToAddresses.trim() == '') || (target_has_email == false))) {
                    emailToSelf = true;
                }
            }
        }
    }

    private boolean IsSaveEmailAsActivity() {
        return globalSettings.EC_Store_Sent_Emails_As_Activity__c;
    }

    public PageReference SwitchMailFormat() {
        // If switching from text-only to html, convert crlf's to html breaks

        if (!is_rich_text) {
            Body = Utilities.ReplaceCRLFWithHtmlBR(Body);
            Body = Body.escapeHtml4();
            Body = Body.replaceAll('&lt;br/&gt;', '<br/>');
            Body = Body.replaceAll('&lt;BR/&gt;', '<BR/>');
            Body = Body.replaceAll('&lt;BR&gt;', '<BR>');
            Body = Body.replaceAll('&lt;br&gt;', '<br>');
        } else // Else if switching the other way, clear body text
        {
            Body = Utilities.StripHTMLFromString(Body, true);
        }

        is_rich_text = (!is_rich_text);
        system.currentpageReference().getParameters().put('isrichtext', string.valueOf(is_rich_text));
        saveTags();

        return system.currentpageReference();
    }

    public void ValidateRelatedObjNameNumber() {
        // Validate related object name/number
        if (!RelatedObjectRecordNameNumberIsValid()) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Related object name/number is invalid');
            ApexPages.addMessage(myMsg);
        }
    }

    public void InitDraftEmailDialog() {
        if (Subject != '' || Body != '') {
            checkDraftInstanceAvaliability();
            SaveDraftSelectorParams(true);

        }
    }

    public void replaceCurrentDraftObject(Draft_Email__c selectedDraft) {
        draft_params.From_Address__c = selectedDraft.From_Address__c;
        draft_params.To_Address__c = selectedDraft.To_Address__c;
        draft_params.Additional_To_Address__c = selectedDraft.Additional_To_Address__c;
        draft_params.CC_Address__c = selectedDraft.CC_Address__c;
        draft_params.BCC_Address__c = selectedDraft.BCC_Address__c;
        draft_params.Importance__c = selectedDraft.Importance__c;
        draft_params.Subject__c = selectedDraft.Subject__c;
        draft_params.Body__c = selectedDraft.Body__c;
        draft_params.Is_Html__c = selectedDraft.Is_Html__c;
        draft_params.Name = selectedDraft.Name;
        draft_params.Author__c = selectedDraft.Author__c;
        draft_params.Internal_Use__c = selectedDraft.Internal_Use__c;
        draft_params.Auto_Saved__c = selectedDraft.Auto_Saved__c;
        draft_params.Keep__c = selectedDraft.Keep__c;
    }

    public void RetrieveDraftEmail() {
        try {
            Draft_Email__c draft = [select Id, Name, From_Address__c, To_Address__c, Additional_To_Address__c,
                CC_Address__c, BCC_Address__c, Importance__c, Subject__c, Body__c,
                Keep__c, Is_Html__c, Author__c, Internal_Use__c, Auto_Saved__c
                from Draft_Email__c
                where id =: SelectedDraftEmailId
            ];
            //delete draft;                            
            replaceCurrentDraftObject(draft);
            // Delete any existing email temporary attachments
            List < Attachment > existingAttachments = [select Id from Attachment where ParentId =: TempAttachmentParentId];
            if (existingAttachments != null)
                ObjectAndFieldAccess.DeleteSObject( existingAttachments);

            // Replace form property values
            FromAddress = draft.From_Address__c;
            TargetName = draft.To_Address__c;
            ToAddresses = draft.Additional_To_Address__c;
            CcAddresses = draft.CC_Address__c;
            BccAddresses = draft.BCC_Address__c;
            Importance = draft.Importance__c;
            Subject = draft.Subject__c;
            Body = draft.Body__c;

            Subject = DraftSelectorController.removeAditionalSting(Subject);

            // Get any exisiting attachments for selected draft email
            List < Attachment > newTempAttachments = new List < Attachment > ();
            for (Attachment a: [select Id, Name, Body, ContentType
                    from Attachment
                    where IsDeleted = false and ParentId =: SelectedDraftEmailId
                ]) {
                newTempAttachments.add(new Attachment(Name = a.Name, Body = a.Body, ContentType = a.ContentType, ParentId = TempAttachmentParentId));
            }
            // If draft attachments found then insert for this email
            if (!newTempAttachments.isEmpty()) {
                ObjectAndFieldAccess.InsertSObject(newTempAttachments);
                GetNextParentId(true); // Attachment added, therefore get next parent id
            }

            // Set format based upon selected draft
            is_rich_text = draft.Is_Html__c;

            // Delete retrieved draft if keep status not checked
            if (draft.Keep__c == false)
                ObjectAndFieldAccess.DeleteSObject(draft); // N.B. attachments automatically deleted with parent

        } catch (Exception e) {
            //Utilities.ExceptionLog('EAC01 - Retrieve draft email exception', e);
            ApexPages.addMessages(e);
        }

        system.currentpageReference().getParameters().put('isrichtext', string.valueOf(is_rich_text));
        system.currentpageReference().getparameters().put('showbody', string.valueOf(ShowBody));
    }

    //It check draft current instance availability 
    //if user some how delete currrent auto save draft from drafts popup than it create new draft
    public void checkDraftInstanceAvaliability() {
        integer recCount = [select count() from Draft_Email__c
            where Id =: draft_params.Id
        ];
        if (recCount == 0) {
            draft_params = null;
            draft_params = new Draft_Email__c();
            draft_params.Auto_Saved__c = true;
        }
    }

    public void calculateSubjectLength() {
        if (Subject.length() < 80) {
            Subject = Subject.subString(0, Subject.length());
        } else {
            Subject = Subject.subString(0, 80);
        }
    }
    //Showing save action status when body or subject is not empty
    public boolean enableActionStatus {
        get {
            if (Subject != '' || Body != '') {
                return true;
            }
            return false;
        }

    }

    public void saveEmailToDraftAutoSave() {
        if (Subject != '' || Body != '') {
            checkDraftInstanceAvaliability();
            SaveDraftSelectorParams(true);

        }
    }
    public void saveEmailToDraft() {
        if (Subject != '' || Body != '') {
            checkDraftInstanceAvaliability();
            SaveDraftSelectorParams(false);
        }
    }

    public void validateDraftNameAndSubject() {
        Subject = DraftSelectorController.validateString(Subject, 250);

        if (draft_params.Name == '' || draft_params.Name == null) {
            draft_params.Name = '(no subject)';
        }

        if (Subject == '') {
            draft_params.Subject__c = '(no subject)';
        } else {
            draft_params.Subject__c = DraftSelectorController.validateString(Subject, 250);
            if (draft_params.Name == '(no subject)') {
                draft_params.Name = DraftSelectorController.validateString(Subject, 80);
            }
        }
    }

    public void SaveDraftSelectorParams(Boolean autoSaveFlag) {
        List < Draft_Email__c > obj_draft_params = GetCurrentDraftRecord();
        if (obj_draft_params.size() > 0) {
            draft_params = obj_draft_params[0];
        }
        validateDraftNameAndSubject();
        draft_params.From_Address__c = FromAddress;
        draft_params.To_Address__c = TargetName;
        draft_params.Additional_To_Address__c = ToAddresses;
        draft_params.CC_Address__c = CcAddresses;
        draft_params.BCC_Address__c = BccAddresses;
        draft_params.Importance__c = Importance;
        draft_params.Body__c = EmailProcessExtensionController.TrimStringToTextFieldLength('ortoo_e2a__Draft_Email__c', 'Body__c', Body, BODY_MAX_LENGTH_OFFSET);
        draft_params.Author__c = UserInfo.getUserId();
        draft_params.Internal_Use__c = false;
        draft_params.Is_Html__c = is_rich_text;
        if (draft_params.Auto_Saved__c != false) {
            draft_params.Auto_Saved__c = autoSaveFlag;
        }
        if (draft_params.Auto_Saved__c == false) {
            draft_params.Keep__c = true;
        }
        if (draft_params.Id == null) {
            DeleteSameContentDraftRecords();
            DeleteDraftRecords();
            ObjectAndFieldAccess.InsertSObject( draft_params);
        } else {
            try {
                ObjectAndFieldAccess.UpdateSObject(draft_params);
            } catch (Exception e) {
                draft_params.Id = null;
                ObjectAndFieldAccess.InsertSObject(draft_params);
            }
        }
    }

    private List < Draft_Email__c > GetCurrentDraftRecord() {
        List < Draft_Email__c > obj_draft_params = [select Id, Name, From_Address__c, To_Address__c, Additional_To_Address__c, CC_Address__c,
            BCC_Address__c, Importance__c, Subject__c, Body__c, Keep__c, Is_Html__c, Auto_Saved__c, Author__c, Internal_Use__c
            from Draft_Email__c where Author__c =: UserInfo.getUserId() and Id =: draft_params.id limit 1
        ];

        return obj_draft_params;
    }
    private void DeleteDraftRecords() {
        List < Draft_Email__c > obj_draft_email_list = [select id from Draft_Email__c where Author__c =: userInfo.getUserId() and Auto_Saved__c = true order by LastModifiedDate desc];
        system.debug('Drafts:' + obj_draft_email_list);
        if (obj_draft_email_list.size() >= NO_OF_RECORDS_IN_DRAFT - 1) {
            List < id > draft_email_id_list = new List < id > ();
            Integer count_records = 0;
            for (Draft_Email__c email_draft: obj_draft_email_list) {
                if (count_records >= NO_OF_RECORDS_IN_DRAFT - 1) {
                    draft_email_id_list.add(email_draft.id);
                }
                count_records = count_records + 1;
            }

            system.debug('ID:' + draft_email_id_list);
            if (draft_email_id_list.size() > 0) {
                ObjectAndFieldAccess.DeleteSObject([select id from Draft_Email__c where id IN: draft_email_id_list]);
            }
        }
    }

    private void DeleteSameContentDraftRecords() {
        List < Draft_Email__c > obj_draft_email_list = [select id, Subject__c, Body__c from Draft_Email__c where Author__c =: userInfo.getUserId()];

        Set < id > draft_email_id_list = new Set < id > ();
        for (Draft_Email__c email_draft: obj_draft_email_list) {
            if (draft_params.Subject__c.equals(email_draft.Subject__c) && draft_params.Body__c.equals(email_draft.Body__c)) {
                draft_email_id_list.add(email_draft.id);
            }
        }

        try {
            ObjectAndFieldAccess.DeleteSObject([select id from Draft_Email__c where id IN: draft_email_id_list]);
        } catch (Exception e) {
            //Hide ENTITY_IS_DELETED exception from breaking page  
        }
    }
    private static integer attachmentCounter = null;
    public boolean EmailHasAttachment() {
        boolean result = false;
        if (attachmentCounter == null) {
            attachmentCounter = [select count() from Attachment where ParentId =: TempAttachmentParentId];
        }
        if (attachmentCounter > 0)
            result = true;
        return result;
    }

    public string GetOweEmailAddressUsingId(id idIn) {
        string result = '';
        OrgWideEmailAddress owe = [select Address from OrgWideEmailAddress where id =: idIn];
        if (owe != null)
            result = owe.Address;
        return result;
    }

    public void DeleteAttachment() {
        Database.Deleteresult dbDeleteResult = ObjectAndFieldAccess.DeleteSObject(DeleteAttachmentID);
    }

    public void DeleteAllTempAttachments() {
        try {
            Attachment[] deleteAttachments = [select id from Attachment where ParentId =: TempAttachmentParentId];
            if (!deleteAttachments.isEmpty())
                Database.DeleteResult[] dbDeleteResultList = ObjectAndFieldAccess.DeleteSObject(deleteAttachments);
        } catch (Exception ex) {
            System.debug('Attachment deletion exception:' + ex.getMessage());
        }
    }

    public boolean isWarning = false;
    public string ShowWarning() {
        boolean haveblank = false;
        string warningMsg = 'Following Additional Related To(s) are blank : ';
        warningMsg += '( ';
        for (RelatedTo rt: RelatedTOList) {
            if (rt.RelatedToSObjectName == null || rt.RelatedToSObjectName == '') {
                for (SelectOption so: rt.RelatedObjectOptions) {
                    if (so.getValue() == rt.RelatedToAPIName) {
                        warningMsg += haveblank ? ',' : '';
                        warningMsg += so.getlabel(); //'? '+so.getlabel() +'\r' ;
                    }
                }
                haveblank = true;
            }
        }
        warningMsg += ' ) .';
        warningMsg += '    Click Send to continue anyway!';

        return haveblank ? WarningMsg : '';

    }
    public PageReference Send() {

        //system.currentpageReference().getparameters().put('showbody', string.valueOf(ShowBody));
        PageReference result = null; //system.currentpageReference();
        //Savepoint sp = Database.setSavepoint();
        emailSendingErrors = '';
        removeInvalidMergeFields();
        try {
            system.currentpageReference().getParameters().put('isrichtext', string.valueOf(is_rich_text));

            // Convert email addresses to lower case
            ToAddresses = ToAddresses.toLowerCase();
            CcAddresses = CcAddresses.toLowerCase();
            BccAddresses = BccAddresses.toLowerCase();
            if (TargetName == null || TargetName == '') {
                TargetId = null;
            }

            //if(!IsDefaultEmailGateway && EmailGateway == 'Mailgun')
            saveTags();
            // Validate and send
            if (PageIsValidated()) {
                if (isWarning == false && ShowWarning() != '') {
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.WARNING, ShowWarning()));
                    isWarning = true;
                    return null;
                }
                if (IsDefaultEmailGateway) {
                    Savepoint sp = Database.setSavepoint();
                    boolean writehasError = false;
                    try {
                        WriteEmailMessage();
                        Database.rollback(sp);
                    } catch (exception e) {
                        writehasError = true;
                        Database.rollback(sp);
                        system.debug('Stack Trace for Support: ' + e.getStackTraceString());
                        String message = 'Error sending email1: ' + e.getMessage();
                        ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, message);
                        ApexPages.addMessage(myMsg);
                        emailSendingErrors += message;
                        return null;
                    }
                }

                if (SendEmail()) {
                    //if( !TargetNameIsValid( TargetName ) )
                    WriteEmailMessage();

                    system.debug('newtest' + Body);
                    DeleteAllTempAttachments();

                    // Set return URL
                    if (system.currentpageReference().getparameters().get('retURL') != null)
                        result = new PageReference(system.currentpageReference().getparameters().get('retURL'));
                                        
                    else
                        result = new PageReference('/home/home.jsp');
                    

                    //Delete draft email after email sent 
                    try {
                        if (draft_params.Keep__c == false) {
                            ObjectAndFieldAccess.DeleteSObject( draft_params);
                        }
                    } catch (exception ex) {
                        system.debug('Support Logs: ' + ex.getMessage());
                    }

                }
            }
        } catch (Exception e) {
            //Database.rollback(sp);
            system.debug('Stack Trace for Support: ' + e.getStackTraceString());
            String message = 'Error sending email: ' + e.getMessage();
            emailSendingErrors += message + '\n';
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, message);
            ApexPages.addMessage(myMsg);
        }
        return result;
    }
    public String emailSendingErrors {
        get;
        set;
    }
    public Boolean isInMobile {
        get;
        set;
    }
    private boolean PageIsValidated() {
        system.debug(TargetId + ' target:related ' + RelatedToSObjectId);
        boolean isValid = true;
        string email_address = '';
        // Validate from-address has been selected
        if (isBusinessUnitEnable == true) {
            List < selectOption > obj_BusinessUnitOptions = BusinessUnitOptions;
            if (!isInMobile) {
                if ((globalSettings.Enable_Business_Unit__c == true) && (globalSettings.Business_Unit_Mandatory__c == true) && (obj_BusinessUnitOptions.size() > 1) && (BusinessUnitId == 'none')) {
                    ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Please select a business unit before sending email.');
                    ApexPages.addMessage(myMsg);
                    isValid = false;
                }
            }
        }

        if (FromAddress == null) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'An email from-address must be selected');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'An email from-address must be selected';
            isValid = false;
        }
        // Validate target name
        if (TargetId != '' && TargetId != null || RelatedToSObjectId != null && RelatedToSObjectId != '') 
        {
            system.debug(TargetId + ' target:related ' + RelatedToSObjectId);
            string errorText;

            // Verify valid lead name entered and that lead has a valid email address
            if (eObject.emailIsFromLead) {
                Lead targetLead; //GetLeadUsingName(TargetName);
                if (TargetId != '' && TargetId != null) {
                    targetLead = GetLeadUsingId(TargetId);
                } else {
                    if (RelatedToSObjectId != '' && RelatedToSObjectId != null) {
                        targetLead = GetLeadUsingId(RelatedToSObjectId);
                    }
                }

                if (targetLead == null) {
                    ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Invalid lead name specified');
                    ApexPages.addMessage(myMsg);
                    isValid = false;
                } else if (targetLead.Email == null || targetLead.Email == '') {
                    if (ToAddresses == '' && SenderBccSelect == false && CcAddresses == '' && BccAddresses == '') {
                        ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Lead does not have a valid email address');
                        emailSendingErrors += 'Lead does not have a valid email address';
                        ApexPages.addMessage(myMsg);
                        system.debug('ToAddresses:');
                        isValid = false;
                    }
                } else {
                    email_address = targetLead.Email;
                }
                // Verify valid contact name entered and that contact has a valid email address
            } 
            else {
                Contact targetContact; //GetContactUsingName(TargetName);

                if (TargetId != '' && TargetId != null) {
                    targetContact = GetContactUsingId(TargetId);
                } else {
                    if (RelatedToSObjectId != '' && RelatedToSObjectId != null) {
                        targetContact = GetContactUsingId(RelatedToSObjectId);
                    }
                }

                if (targetContact != null && targetContact.Email == null) {
                    if (ToAddresses == '' && SenderBccSelect == false && CcAddresses == '' && BccAddresses == '') {
                        ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Contact does not have a valid email address');
                        ApexPages.addMessage(myMsg);
                        emailSendingErrors += 'Contact does not have a valid email address';
                        isValid = false;
                    }
                } else if (targetContact != null && targetContact.Email != null) {
                    email_address = targetContact.Email;
                }
            }
        }

        if (ToAddresses.trim() == '' && SenderBccSelect == false && CcAddresses.trim() == '' && BccAddresses.trim() == '' && email_address.trim() == '') {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Please specify any; Additional To, CC, BCC');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'Please specify any; Additional To, CC, BCC';
            isValid = false;
        }
        if (HideToField == true && ToAddresses.trim() == '') {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Please specify To:');
            ApexPages.addMessage(myMsg);
            isValid = false;
        }
        if (HideToField == false && TargetName.trim() == '' && ToAddresses.trim() == '') {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Please specify either a To: or Additional To:');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'Please specify either a To: or Additional To:';
            isValid = false;
        }

        // Validate related object name/number
        if (!RelatedObjectRecordNameNumberIsValid()) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Related object name/number is invalid');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'Related object name/number is invalid';
            isValid = false;
        }
        // Validate Additional To email addresses
        if (!Utilities.EmailAddressListIsValid(Utilities.DelimitedStringToList(SEMI_COLON, ToAddresses))) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Found invalid To Email address');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'Found invalid To Email address';
            isValid = false;
        }
        // Validate Cc email addresses
        if (!Utilities.EmailAddressListIsValid(Utilities.DelimitedStringToList(SEMI_COLON, CcAddresses))) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Found invalid Cc Email address');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'Found invalid Cc Email address';
            isValid = false;
        }
        // Validate Bcc email addresses
        if (!Utilities.EmailAddressListIsValid(Utilities.DelimitedStringToList(SEMI_COLON, BccAddresses))) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Found invalid Bcc Email address');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'Found invalid Bcc Email address';
            isValid = false;
        }
        // Subject must be entered
        if (Subject == null || Subject.trim() == '') {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Subject: you must enter a value');
            ApexPages.addMessage(myMsg);
            isValid = false;
        }
        // Body cannot exceed 300kb characters
        /*if (Body.length() > 300 * 1024) {
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Body: may not exceed 300kb characters');
            ApexPages.addMessage(myMsg);
            emailSendingErrors += 'Body: may not exceed 300kb characters\n';
            isValid = false;
        }*/
        // Attachments cannot exceed 10Mb
        if (total_attachments_size_in_bytes > MaximumAttachmentsSizeInBytes) {
            //ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Attachments: total size may not exceed 10Mb');
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Attachments: total size may not exceed 5Mb');
            emailSendingErrors += 'Attachments: total size may not exceed 5Mb\n';
            ApexPages.addMessage(myMsg);
            isValid = false;
        }
        
         //check if a valid name is entered
    if(!String.isBlank(TargetName))
    {
    	if (eObject.emailIsFromLead)
      	{
        	Lead targetLead;//GetLeadUsingName(TargetName);
        	targetLead = GetLeadUsingName(TargetName);
        	if (targetLead == null)
	        {
	          ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'No match found for the Lead specified in \'To\'');
	          ApexPages.addMessage(myMsg);
	          isValid = false;
	        } else if (targetLead.Email == null || targetLead.Email == '') 
	        {
	            if(ToAddresses == '' && SenderBccSelect == false  && CcAddresses == '' && BccAddresses == '')
	            {
	                ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Lead does not have a valid email address');
	                emailSendingErrors += 'Lead does not have a valid email address';
	                ApexPages.addMessage(myMsg);
	                system.debug('ToAddresses:');
	                isValid = false;
	            }
	        }
	        else
	        {
	            email_address = targetLead.Email;
	            TargetId = targetLead.Id;
	        }
      	}
      	else
      	{
      		Contact targetContact;
            targetContact = GetContactUsingName(TargetName);
            if (targetContact == null)
	        {
	          ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'No match found for the Contact specified in \'To\'');
	          ApexPages.addMessage(myMsg);
	          isValid = false;
	        }
	        else if (targetContact != null && targetContact.Email == null) 
	        {
	            if(ToAddresses == '' && SenderBccSelect == false && CcAddresses  == '' && BccAddresses == '')
	            {
	                ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Contact does not have a valid email address');
	                ApexPages.addMessage(myMsg);
	                emailSendingErrors += 'Contact does not have a valid email address';
	                isValid = false;
	            }
	        }
	        else if(targetContact != null && targetContact.Email != null)
	        {
	            email_address = targetContact.Email;
	            TargetId = targetContact.Id;
	        }
      		
      	}
    }

        return isValid;
    }



    private void AddThreadID() {
        Name = Subject;
        // Add thread id to email subject and body where required  
        if ((globalSettings.EC_Thread_ID_In_Subject__c == true) || (globalSettings.EC_Thread_ID_In_Body__c == true)) {
            String objId = related_obj_id;
            system.debug('objId:' + objId);
            if (objId != null) {
                // Get obj thead id
                String threadId = SfUtilities.getThreadIdfromObject(objId); //getThreadId(objId);
                system.debug('threadId' + threadId);
                if (threadId != null) {
                    if ((globalSettings.EC_Thread_ID_In_Subject__c == true) && (!Utilities.isThreadIdExist(objId, Subject))) //(!Subject.contains(threadId)))
                    {
                        if (Utilities.isNewThreadId(threadId)) {
                            Subject = Subject + ' ' + threadId;
                        } else {
                            Subject = Subject + ' [' + threadId + ']';
                        }
                    }

                    if ((globalSettings.EC_Thread_ID_In_Body__c == true) && (!Utilities.isThreadIdExist(objId, Body))) //(!Body.contains(threadId)))
                    {
                        if (is_rich_text) {
                            if (Utilities.isNewThreadId(threadId)) {
                                Body = Body + HTML_BREAK + HTML_BREAK + '<DIV style="display:block;">' + threadId + '</DIV>' + HTML_BREAK;
                            } else {
                                Body = Body + HTML_BREAK + HTML_BREAK + '<DIV style="display:block;">[' + threadId + ']</DIV>' + HTML_BREAK;
                            }
                        } else {
                            if (Utilities.isNewThreadId(threadId)) {
                                Body = Body + CR_LF + CR_LF + threadId;
                            } else {
                                Body = Body + CR_LF + CR_LF + '[' + threadId + ']';
                            }

                        }
                    }

                }
            }
        }
    }

    private string formatNewRecordBody(string Body, Id newobjId) {
        string EmailBody = Body;
        Map < Id, Attachment > NewAttachmentMap = new Map < Id, Attachment > ();

        Set < Id > attachment_ids = new Set < Id > ();

        for (Attachment a: [Select Id
                from Attachment
                where ParentId =: related_obj_id OR ParentId =: eObject.previousEmailObject.previousEmailId
            ]) {
            string searchString = '../servlet/servlet.FileDownload?file=' + a.Id;
            string searchString2 = '/servlet/servlet.FileDownload?file=' + a.Id;

            if (EmailBody.indexOf(searchString) != -1 || EmailBody.indexOf(searchString2) != -1) {
                attachment_ids.add(a.Id);
            }
        }

        if (attachment_ids.size() > 0) {
            for (Attachment a: [Select Id, Name, ContentType, Body
                    from Attachment
                    where ParentId =: related_obj_id OR ParentId =: eObject.previousEmailObject.previousEmailId
                ]) {
                Attachment newAttach = new Attachment();
                newAttach.Name = a.Name;
                newAttach.ContentType = a.ContentType;
                newAttach.Body = a.Body;
                newAttach.ParentId = newobjId;

                NewAttachmentMap.put(a.Id, newAttach);
            }
            if (NewAttachmentMap.size() > 0) {
                ObjectAndFieldAccess.InsertSObject(NewAttachmentMap.values());
            }

            //Replace Body with new attachmetns

            for (Id s: NewAttachmentMap.keyset()) {
                string searchString = '../servlet/servlet.FileDownload?file=' + s;
                string searchString2 = '/servlet/servlet.FileDownload?file=' + s;

                if (EmailBody.indexOf(searchString) != -1) {
                    EmailBody = EmailBody.replace(searchString, '/servlet/servlet.FileDownload?file=' + NewAttachmentMap.get(s).Id);
                } else if (EmailBody.indexOf(searchString2) != -1) {
                    EmailBody = EmailBody.replace(searchString, '/servlet/servlet.FileDownload?file=' + NewAttachmentMap.get(s).Id);
                }
            }
        }

        return EmailBody;
    }

    private string formatBodyInlines(string Body, List < Attachment > inlineAttachment) {
        string EmailBody = Body;
        String link_format1 = '/servlet/servlet\\.ImageServer';
        String link_format2 = '\\.\\.\\/servlet\\/servlet\\.ImageServer';
        String link_format3 = '\\.\\/servlet\\/servlet\\.ImageServer';


        //Remove this code in future for attachment
        if (eObject.isEmailReply || eObject.isEmailReplyToAll || eObject.IsEmailForward) {
            List < Attachment > fileAttachments = new List < Attachment > ();
            fileAttachments = [Select Id, Name, Description
                from Attachment
                where ParentId =: related_obj_id OR ParentId =: eObject.previousEmailObject.previousEmailId
            ];

            system.debug('EmailBody' + EmailBody);

            Set < Id > attachment_ids = new Set < Id > ();

            for (Attachment a: fileAttachments) {
                string searchString = '../servlet/servlet.FileDownload?file=' + a.Id;
                string searchString2 = '/servlet/servlet.FileDownload?file=' + a.Id;
                string searchstring3 = (a.Description != null && a.Description.contains('cid:')) ? a.Description : '';
                system.debug('Attachment a' + a.Id);
                system.debug('searchstring3 :' + searchstring3);
                system.debug('EmailBody.indexOf(searchString):' + EmailBody.indexOf(searchString));
                string refLink = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/servlet/servlet.FileDownload?file=' + a.Id;
                if (EmailBody.indexOf(searchString) != -1) {
                    system.debug('in for : ' + 'cid:' + a.Name);
                    inlineAttachedImageName = a.Name;
                    EmailBody = EmailBody.replace(searchString, 'cid:' + a.Name);
                    //inlineAttachment.add(a);
                    attachment_ids.add(a.Id);
                } else if (EmailBody.indexOf(searchString2) != -1) {
                    system.debug('in for 2 : ' + 'cid:' + a.Name);
                    inlineAttachedImageName = a.Name;
                    EmailBody = EmailBody.replaceAll(searchString2, 'cid:' + a.Name);
                    //inlineAttachment.add(a);
                    attachment_ids.add(a.Id);
                } else if (searchstring3 != '' && EmailBody.indexOf(searchstring3) != -1) {
                    system.debug('in for3');

                    inlineAttachedImageName = a.Name;
                    EmailBody = EmailBody.replaceAll(searchString3, 'cid:' + a.Name);
                    //inlineAttachment.add(a);
                    attachment_ids.add(a.Id);
                    system.debug('EmailBody.replace :' + EmailBody);
                    system.debug('refLink :' + refLink);

                }

                if (attachment_ids.size() > 0) {
                    inlineAttachment = [Select Id, Name, ContentType, Body, Description
                        from Attachment
                        where Id IN: attachment_ids
                    ];
                }
            }


        }

        system.debug('https://' + System.URL.getSalesforceBaseUrl().getHost() + link_format1);
        system.debug('contains ? ' + EmailBody.contains('https://' + System.URL.getSalesforceBaseUrl().getHost() + link_format1));

        if (!EmailBody.contains('https://' + System.URL.getSalesforceBaseUrl().getHost() + link_format1)) {
            system.debug('in link format');
            EmailBody = EmailBody.replaceAll(link_format2, 'https://' + System.URL.getSalesforceBaseUrl().getHost() + link_format1);
            if (!EmailBody.contains('https://' + System.URL.getSalesforceBaseUrl().getHost() + link_format1)) {
                EmailBody = EmailBody.replaceAll(link_format3, 'https://' + System.URL.getSalesforceBaseUrl().getHost() + link_format1);
                system.debug('In last1:' + EmailBody);
            }


        }
        system.debug('New EmailBody:' + EmailBody);
        return EmailBody;
    }

    private void removeInvalidMergeFields() {
        pattern newPattern = pattern.compile('\\{![\\w]+[.][\\w]+\\}'); // Regex expression: \{![\w]+[.][\w]+\}
        matcher newMatcher = newPattern.matcher(Subject);
        Subject = newMatcher.replaceAll('');
        newMatcher = newPattern.matcher(Body);
        Body = newMatcher.replaceAll('');
    }
    private boolean SendEmail() {
        boolean isSuccess = true;
        AddThreadID();
        string local_body = Body;

        //format Body for inline
        List < Attachment > inlineAttachment = new List < Attachment > ();
        local_body = formatBodyInlines(local_body, inlineAttachment);

        // Convert html break to cr/lr if text-only mode
        if (is_rich_text == false) {
            local_body = Utilities.ReplaceHtmlBRWithCRLF(local_body);
        }
        // Create and prepare EmailMessage
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();

        //assigning use signature from user settins directly

        mail.setUseSignature(userSettings.EC_Use_Signature__c);
        mail.setBCCsender(false);
        //mail.setSaveAsActivity(IsSaveEmailAsActivity());
        mail.setSaveAsActivity(false);
        mail.setEmailPriority(Importance);

        // Set from address
        try {
            FromAddressItem selectedFromAddress = from_address_map.get(integer.valueOf(FromAddress));
            if (selectedFromAddress.AddressType == 'owea') {
                mail.setOrgWideEmailAddressId(selectedFromAddress.OWEAId); // Organisation wide email address ID
            } else {
                mail.setReplyTo(selectedFromAddress.EmailAddress); // User email address
                mail.setSenderDisplayName(selectedFromAddress.DisplayName);
            }
        } catch (exception e) {}

        // Set To Addresses list
        // Add Additional To Addresses to To Address list
        List < string > toAddressesList = new List < string > ();
        if (ToAddresses != '')
            toAddressesList.addAll(Utilities.DelimitedStringToList(SEMI_COLON, ToAddresses));

        mail.setToAddresses(toAddressesList);

        // Set Cc Address list
        if (CcAddresses != '')
            mail.setCcAddresses(Utilities.DelimitedStringToList(SEMI_COLON, CcAddresses));

        // Set Bcc Address list (if compliance bcc not enabled)

        if (globalSettings.EC_Compliance_Bcc_Enabled__c == false) {
            List < string > bccAddressesList = new List < string > ();
            // If default bcc is selected, add to Bcc Address list
            if ((BusinessUnitIsSelected) && (businessUnit.Default_BCC_Address__c != '') && (DefaultBccSelect == true)) //(businessUnit.BCC_Address__c != '') && (DefaultBccSelect == true))
                bccAddressesList.add(businessUnit.Default_BCC_Address__c);
            // If sender bcc is selected, add to Bcc Address list
            if (SenderBccSelect == true)
                bccAddressesList.add(userSettings.EC_Email_Address__c);
            if (BccAddresses != '')
                bccAddressesList.addAll(Utilities.DelimitedStringToList(SEMI_COLON, BccAddresses));

            if (!bccAddressesList.isEmpty())
                mail.setBccAddresses(bccAddressesList);
        }
        mail.setSubject(Subject);

        // If html. combined or visualforce templated selected
        if (template_frame_is_active == true) {
            if (is_rich_text) {
                mail.setHtmlBody(local_body);
            } else if (is_rich_text == false) {
                mail.setPlainTextBody(local_body);
            }
            mail.setSubject(Subject);
        }
        // Set subject and body
        if (template_frame_is_active == false) {
            // If html email add html, head, style and body tags      
            if (is_rich_text)
                local_body = '<html><style><!-- p{margin-top:0px; margin-bottom:0px;} --></style><body bgcolor="#FFFFFF" marginwidth="2" ' +
                'marginheight="2" style="font-family:Arial;font-size:10pt;color:000000">' + local_body + '</body></html>';
            if (is_rich_text) {
                mail.setHtmlBody(local_body);
            } else {
                mail.setPlainTextBody(local_body);
            }
        }

        // Set email file attachments
        List < Messaging.Emailfileattachment > fileAttachments = new List < Messaging.Emailfileattachment > ();
        if (EmailHasAttachment()) {
            try {
                List < Attachment > attachments = [select Name, Body, BodyLength, ContentType
                    from Attachment
                    where ParentId =: TempAttachmentParentId Limit 200
                ];

                fileAttachments = CreateEmailFileAttachments(attachments, false);
            } catch (exception e) {}
        }

        //Set inline file attachments
        List < Messaging.Emailfileattachment > inlinefileAttachments = CreateEmailFileAttachments(inlineAttachment, true);

        //set inline attachments with other attachmetns
        if (inlinefileAttachments.size() > 0)
            fileAttachments.addAll(inlinefileAttachments);

        if (fileAttachments.size() > 0)
            mail.setFileAttachments(fileAttachments);
        // Set target object and what id
        system.debug('TargetName  :' + TargetName);
        if (TargetNameIsValid(TargetName)) {
            //get lead set email to '' not null
            //mail.setTargetObjectId(GetTargetIdUsingName(TargetName));
            string target_email = GetTargetNameEmailUsingId(TargetId); //getting fresh data for target
            if (target_email != null && target_email != '') {
                if (!isInMobile) {
                    mail.setTargetObjectId(TargetId);
                }
            } else {
                target_email = '';
            }
        }
        if (related_obj_id != null && !related_obj_id.startsWith(LEAD_OBJECT_PREFIX) && !related_obj_id.startsWith(WORKORDER_OBJECT_PREFIX) && !related_obj_id.startsWith(CONTACT_OBJECT_PREFIX) && !related_obj_id.startsWith(WORKORDER_LINE_ITEM_OBJECT_PREFIX)) //check prefix if not of lead
            mail.setWhatId(related_obj_id);

        //Setup headers 
        emailHeadersAsText = '';
        if (reply_to_message != null) {
            if (reply_to_message.messageId != null) {
                mail.setInReplyTo(reply_to_message.messageId);
                emailHeadersAsText += 'In-Reply-To: ' + reply_to_message.messageId + '\r\n';
            }
            if (reply_to_message.headersAsText != null) {
                Map < string, string > header_values = getReferencesHeaderValue(reply_to_message.headersAsText, new Set < string > {
                    'References',
                    'In-Reply-To'
                });

                string header_values_as_string = header_values.size() > 0 ? Utilities.listToDelimitedString(',', header_values.values()) : null;

                //validate references

                string valid_headers = validateReferences(header_values_as_string);

                if (valid_headers != null && valid_headers != '') {
                    mail.setReferences(valid_headers);
                    emailHeadersAsText += 'References: ' + valid_headers + '\r\n';
                }
                system.debug('valid_headers: ' + valid_headers);
            }
        }

        isSuccess = SendEmail(mail, inlinefileAttachments);
        system.debug('email body check local_body : ' + local_body);
        return isSuccess;
    }

    public List < Messaging.Emailfileattachment > CreateEmailFileAttachments(List < Attachment > Attachments, boolean isInline) {
        List < Messaging.Emailfileattachment > Temporary_efa = new List < Messaging.Emailfileattachment > ();
        if (Attachments.size() > 0) {
            for (Attachment ia: Attachments) {
                Messaging.Emailfileattachment efa = new Messaging.Emailfileattachment();
                efa.setContentType(ia.ContentType);
                efa.setFileName(ia.Name);
                efa.setBody(ia.Body);
                efa.setinline(isInline);
                Temporary_efa.add(efa);
            }
        }
        return Temporary_efa;
    }

    public boolean SendEmail(Messaging.SingleEmailMessage mail, List < Messaging.EmailFileAttachment > inlineattachments) {
        boolean EmailSent = false;
        // Send email
        try {
            if (IsDefaultEmailGateway) {
                Messaging.sendEmail(new Messaging.SingleEmailMessage[] {
                    mail
                });

                EmailSent = true;
            } else if (!IsDefaultEmailGateway && EmailGateway == 'Mailgun')
                EmailSent = SendEmailMailgun(mail, inlineattachments);
        } catch (EmailException e) {
            // Catch email errors and and show as error on form 
            // Identify the unverified org wide email address error to allow for friendlier message
            /*Utilities.ExceptionLog('EAC02 - sendEmail error: ', e);*/
            ApexPages.Message errMsg;
            if (e.getMessage().contains('UNVERIFIED_SENDER_ADDRESS')) {
                errMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Invalid email from-address: this Organization-Wide Email Address has not been verified for use. Contact your Administrator.');
                ApexPages.addMessage(errMsg);
                emailSendingErrors += 'Invalid email from-address: this Organization-Wide Email Address has not been verified for use. Contact your Administrator.' + '\n';
            } else if (e.getMessage().contains('SINGLE_EMAIL_LIMIT_EXCEEDED')) {
                errMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Your Salesforce organization\'s daily limit for outbound emails has reached.');
                ApexPages.addMessage(errMsg);
                emailSendingErrors += 'Your Salesforce organization\'s daily limit for outbound emails has reached.' + '\n';
            } else if (e.getMessage().contains('NO_MASS_MAIL_PERMISSION')) {
                errMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Single email is not enabled for your organization or profile. Please check deliverability settings at Setup | Administration setup | Email Administration | Deliverability, and verify if the access level is set to "All e-mails".');
                ApexPages.addMessage(errMsg);
                emailSendingErrors += 'Single email is not enabled for your organization or profile. Please check deliverability settings at Setup | Administration setup | Email Administration | Deliverability, and verify if the access level is set to "All e-mails".';
            } else {
                errMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Error occurred while sending email. [ref: EAC02] ' + e);
                ApexPages.addMessage(errMsg);
                emailSendingErrors += 'Error occurred while sending email. [ref: EAC02] ' + e + '\n';
            }

            EmailSent = false;
        } catch (exception e) {
            // Catch all other errors and show as error on form
            /*Utilities.ExceptionLog('EAC03 - sendEmail error: ', e);*/
            ApexPages.Message errMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Error occurred while sending email. [ref: EAC03]');
            ApexPages.addMessage(errMsg);
            emailSendingErrors += 'Error occurred while sending email. [ref: EAC03]';
            EmailSent = false;
        }
        System.debug('after email sent 1');
        processInvalidOrgWideEmails();
        System.debug('after email sent 2');

        return EmailSent;
    }
    //getting the right domain
    public String GetDomain() 
    {
       String domainFromAddress = '';
       String domain;
       try
	   {
	   	    FromAddressItem selectedFromAddress = from_address_map.get(integer.valueOf(FromAddress));
	   	    system.debug('FromAddress :'+selectedFromAddress.EmailAddress);
	        domainFromAddress = selectedFromAddress.EmailAddress.split('@').get(1);
	        system.debug('domainFromAddress :'+domainFromAddress);
	    	HttpRequest req;
	        req = new HttpRequest();
	        Blob headerValue = Blob.valueOf('api' + ':' +EmailGateway_APIKey );
	        String authorizationHeader = 'Basic ' + EncodingUtil.base64Encode(headerValue);
	        req.setHeader('Authorization', authorizationHeader);
	        req.setMethod('GET');
	        req.setEndpoint('https://api.mailgun.net/v3/domains');
	        Http http = new Http();
	        HttpResponse res;
	        res = http.send(req);
	        //check result
	        if(res.getStatusCode() == 200)
	        {
	        	domainFromJSON obj = domainFromJSON.parse(res.getBody());
	        	system.debug('Domains :'+obj.items);
		        //check domain
		        for(domainFromJSON.cls_items item : obj.items) 
		        {
		        	if( item.name == domainFromAddress)
		        	{
		        		domain = item.name;
		        		break;
		        	}
		        	else
		        	{
		        		domain = '';
		        	}
		        }
		        if(String.isBlank(domain))
		        {
		        	system.debug('Error : Domain empty');
		        	ApexPages.Message myMsg;
		        	myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'The domain '+domainFromAddress+' must be added to Mailgun configuration in order to successfully send emails from that email domain.');
                	ApexPages.addMessage(myMsg);
		        }    
	        }
	        else
	        {
	        	system.debug('Error : Domain empty');
	        	MailgunGateway.MailgunResponse r = (MailgunGateway.MailgunResponse)JSON.deserialize(res.getBody(), MailgunGateway.MailgunResponse.class);
	            throw new MailgunGateway.MailgunException(r.message);
	            ApexPages.Message myMsg;
	            myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'The domain '+domainFromAddress+' must be added to Mailgun configuration in order to successfully send emails from that email domain.');
                ApexPages.addMessage(myMsg);
	        }
	        
	    }catch(Exception e){
            system.debug('Getting Domain Error: '+e.getStackTraceString());
          	throw new MailgunGateway.MailgunException('Error While getting domain from mailgun:\n\n' + Utils.detailError(e));
          	ApexPages.Message myMsg;
          	myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'The domain '+domainFromAddress+' must be added to Mailgun configuration in order to successfully send emails from that email domain.');
            ApexPages.addMessage(myMsg);
        }
        return domain;
    }
    public boolean SendEmailMailgun(Messaging.SingleEmailMessage mail, List < Messaging.EmailFileAttachment > inlineattachments) {
        boolean EmailSent = false;
        EmailGateway.CustomEmailMessage email = new EmailGateway.CustomEmailMessage(mail, inlineattachments);
		//get domain
		String domain = GetDomain();
		system.debug('domain :'+domain);
        //set connection values
        //p.api_domain = EmailGateway_Domain;
        if(!String.isBlank(domain))
        {
        	domain = 'https://api.mailgun.net/v3/'+domain;
        	MailgunGateway.Parameters p = new MailgunGateway.Parameters();
        	p.api_key = EmailGateway_APIKey;
       		p.api_domain = domain;
        //create MailgunGateway
	        MailgunGateway gateway = new MailgunGateway(p);
	
	        //send email
	        try {
	            EmailSent = gateway.sendEmail(email);
	        } catch (Exception e) {
	            //System.Debug(LoggingLevel.ERROR, Utils.detailError(e));
	            ApexPages.Message errMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Error occurred while sending email. [ref: EAC03]' + e.getMessage());
	            ApexPages.addMessage(errMsg);
	
	            emailSendingErrors += 'Error occurred while sending email. [ref: EAC03]' + e.getMessage();
	            EmailSent = false;
	        }
        }
        return EmailSent;
    }
    private static Schema.DescribeSObjectResult describe_sobj_result;
    private static Map < String, Schema.SObjectField > sobj_field_map;

    public static final string TRUNC_STRING = '[Text truncated due to size limit]';
    public static string TrimStringToTextFieldLength(string objectName_IN, string fieldName_IN, string inputString_IN) {
        return TrimStringToTextFieldLength(objectName_IN, fieldName_IN, inputString_IN, 0);
    }
    public static string TrimStringToTextFieldLength(string objectName_IN, string fieldName_IN, string inputString_IN, Integer offset) {
        if (inputString_IN == null)
            inputString_IN = '';
        string result = inputString_IN;
        /*
        if (describe_sobj_result == null || describe_sobj_result.getName() != objectName_IN)
        {
          describe_sobj_result = SfUtilities.GetSObjectDescription(objectName_IN);
          sobj_field_Map = describe_sobj_result.fields.getMap();
        }
        */
        try {
            Schema.DescribeFieldResult fr = Utilities.getDescribeFieldResult(objectName_IN, fieldName_IN);
            //Schema.DescribeFieldResult fr = sobj_field_Map.get(fieldName_IN).getDescribe();
            if (offset >= fr.getLength()) {
                offset = 0; // offset is bigger than total length of the field itself, reset it.
            }
            if (inputString_IN.length() > (fr.getLength() - offset)) {
                result = inputString_IN.substring(0, fr.getLength() - offset);
                if (result.length() > TRUNC_STRING.length()) {
                    result = result.substring(0, result.length() - TRUNC_STRING.length()) + TRUNC_STRING;
                }
            }
        } catch (Exception e) {}

        return result;
    }
    private boolean WriteEmailMessage() {
        boolean result = false;
        boolean attachmentDbError = false;

        /* if attachments are not to be saved then add a list of attachments sent to the email body*/
        string attachmentsString = '';
        string TaskAttachmentstring = '';

        if (EmailHasAttachment()) //&& (BusinessUnitIsSelected) && businessUnit.Case_Email_Attachments_Saved__c == false))
        {
            TaskAttachmentstring = GetTaskAttachmentstring();
        }

        /* Populate and write new EmailMessage record*/
        EmailMessageInternal message = new EmailMessageInternal();
        message = PopulateEmailMessageInternalObject(message, TaskAttachmentstring);

        //string whoID = (TargetName != '' && TargetName != null)? GetTargetIdUsingName(TargetName) : null ;
        string whoID = (TargetId != '' && TargetId != null) ? TargetId : null;
        Id newMsgId = null;
        // Write EmailMessage record
        //Global setting to log activity is true 
        if (IsSaveEmailAsActivity()) {
            string status = getTaskStatus();
            createTask(whoID, related_obj_id, 'Normal', status, FromAddress, ToAddresses, CcAddresses, BCcAddresses, Subject, message.TextBody, TaskAttachmentstring);
        }
        List < sObject > sobject_to_updated = new List < sObject > ();
        // insert custom storage object record (if possible)
        if (newMsgId == null && eObject.previousEmailObject.previousEmailId != null) {
            SObject originalCustomObject = EmailClientInitController.GetCustomStorageEmailObject(eObject.previousEmailObject.previousEmailId) ;
            if (originalCustomObject != null) {
                // email id is present AND the ID belonged to custom object so we are good
                if (globalSettings.EC_Auto_Replied_Status__c && (eObject.isEmailReply || eObject.isEmailForward || eObject.isEmailReplyToAll)) {
                    originalCustomObject.put('Status__c', eObject.isEmailForward ? 'Forwarded' : 'Replied');
                    sobject_to_updated.add(originalCustomObject);
                }

                if (globalSettings.EC_Store_Sent_Emails__c) {
                    string objectName = eObject.emailObjectAPIName;
                    SObject obj = SfUtilities.getNewSObjectById(eObject.previousEmailObject.previousEmailId);
                    if (obj != null && objectName != null) {
                        obj = PopulateRelatedObject(message, objectName, obj);
                        EmailMessageTriggerHandler.toRun = false;
						if(obj.get('Html_Body__c') != null && ((String)obj.get('Html_Body__c')).length() > 120 * 1024)
	                    {
	                        obj.put('Html_Body__c', ((String)obj.get('Html_Body__c')).substring(0, 120 * 1024) + TRUNC_STRING);
	                    }
                        EmailTemplateUtility.objectInsertCall(obj);
                        newMsgId = obj.Id;

                        message.HtmlBody = formatNewRecordBody(message.HtmlBody, newMsgId);
						message.HtmlBody = message.HtmlBody == null ? '' : message.HtmlBody;
	                    message.HtmlBody = message.HtmlBody.length() > 125 * 1024 ? message.HtmlBody.substring(0, 125 * 1024) + TRUNC_STRING : message.HtmlBody;
                        obj.put('Html_Body__c', TrimStringToTextFieldLength(objectName, 'Html_Body__c', message.HtmlBody));
                        sobject_to_updated.add(obj);


                    }
                }
            }
        }

        if (newMsgId == null && globalSettings.EC_Store_Sent_Emails__c) {
            // custom object was not inserted
            // email_id was not present OR it didn't have ID of a custom object msg, so
            // we don't know what type of object we will store. in this case, we expect a new parameter
            // called obj_name this parameter will tell us what object to store
            system.debug('EC_Store_Sent_Emails__c is set');
            SObject obj = SfUtilities.getNewSObjectByName(eObject.parameters.ObjectNameParm);
            system.debug(logginglevel.error, 'eObject.parameters.ObjectNameParm: ' + eObject.parameters.ObjectNameParm + ' obj ' + obj);
            if (obj != null) {
                string objectName = eObject.parameters.ObjectNameParm;
                system.debug('Before PopulateObject  eObject.parameters.ObjectNameParm' + objectName);
                system.debug('Before PopulateObject   ' + obj);
                obj = PopulateRelatedObject(message, objectName, obj);
                system.debug('After PopulateObject     ' + obj);
                EmailMessageTriggerHandler.toRun = false;
                if(obj.get('Html_Body__c') != null && ((String)obj.get('Html_Body__c')).length() > 120 * 1024)
                {
                    obj.put('Html_Body__c', ((String)obj.get('Html_Body__c')).substring(0, 120 * 1024) + TRUNC_STRING);
                }
                EmailTemplateUtility.objectInsertCall(obj);
                newMsgId = obj.Id;

                message.HtmlBody = formatNewRecordBody(message.HtmlBody, newMsgId);
                message.HtmlBody = message.HtmlBody == null ? '' : message.HtmlBody;
                message.HtmlBody = message.HtmlBody.length() > 125 * 1024 ? message.HtmlBody.substring(0, 125 * 1024) + TRUNC_STRING : message.HtmlBody;
                obj.put('Html_Body__c', TrimStringToTextFieldLength(objectName, 'Html_Body__c', message.HtmlBody));
                sobject_to_updated.add(obj);
            }
        }
        EmailTemplateUtility.objectUpdateCall(sobject_to_updated);
        // Save attachments if required
        if (newMsgId != null && EmailHasAttachment()) {
            if ((!BusinessUnitIsSelected) || (BusinessUnitIsSelected /* && businessUnit.Case_Email_Attachments_Saved__c == true*/ )) {
                List < Attachment > attachments = new List < Attachment > ();
                for (Attachment a: [select Name, Body, ContentType from Attachment where ParentId =: TempAttachmentParentId order by name]) {
                    // Add to list
                    Attachment newAttachment = new Attachment();
                    newAttachment.Body = a.Body;
                    newAttachment.Name = a.Name;
                    newAttachment.ContentType = a.ContentType;
                    newAttachment.ParentId = newMsgId;
                    attachments.add(newAttachment);
                }
                // Write attachments
                try {
                    EmailTemplateUtility.objectListInsertCall(attachments);
                } catch (DmlException e) {
                    /*Utilities.ExceptionLog('EAC04 - Insert Attachment error: ', e);*/
                    attachmentDbError = true;
                }
            }
         	//storing attachments in files
	        List < Attachment > attachments = [select Description,ParentId, Name, Body, BodyLength, ContentType
	                from Attachment
	                where ParentId =: TempAttachmentParentId Limit 200
	            ];
	        system.debug('attachments :'+attachments);
	        List<Attachment> newEmailAttachments = new List<Attachment>();
	        EmailProcessExtensionController helper = new EmailProcessExtensionController();
	        newEmailAttachments = ProcessAttachments(attachments , related_obj_id);
	        newEmailAttachments.addAll(ProcessAttachments(attachments , newMsgId));
	        helper.StoreAttachmentInAttachmentObjectOrFiles(newEmailAttachments , 'Files');
        }

        if (globalSettings.EC_Store_Sent_Emails__c || (newMsgId != null && (!attachmentDbError)))
            result = true;

        return true;
    }
    /*Method to get attachment string*/
    @TestVisible
    public string GetTaskAttachmentstring() {
        string TaskAttachmentstring = '';
        for (Attachment a: [select Name from Attachment where ParentId =: TempAttachmentParentId]) {
            if (TaskAttachmentstring == null) {
                TaskAttachmentstring = ' ' + a.Name;
            } else {
                TaskAttachmentstring = TaskAttachmentstring != null ? TaskAttachmentstring + ', ' + a.Name : ' ' + a.Name;
            }
        }
        return TaskAttachmentstring;
    }
    /*Method to fill in message class based on values input by user*/
    private EmailMessageInternal PopulateEmailMessageInternalObject(EmailMessageInternal message, string attachmentsString) {
        /*Set Bcc Address list (if compliance bcc not enabled)*/
        if (globalSettings.EC_Compliance_Bcc_Enabled__c == false) {
            //If default bcc is selected, add to Bcc Address list
            if ((BusinessUnitIsSelected) && (businessUnit.Default_BCC_Address__c != '') && (DefaultBccSelect == true)) //(businessUnit.BCC_Address__c != '') && (DefaultBccSelect == true))
            {
                if (BccAddresses != '')
                    BccAddresses = BccAddresses + SEMI_COLON;

                if (!BccAddresses.contains(businessUnit.Default_BCC_Address__c)) {
                    BccAddresses = BccAddresses + businessUnit.Default_BCC_Address__c; //BCC_Address__c;
                }
            }
            //If sender bcc is selected, add to Bcc Address list
            if (SenderBccSelect == true) {
                if (BccAddresses != '')
                    BccAddresses = BccAddresses + SEMI_COLON;

                if (!BccAddresses.contains(userSettings.EC_Email_Address__c)) {
                    BccAddresses = BccAddresses + userSettings.EC_Email_Address__c;
                }
            }
            message.BccAddress = BccAddresses;
        }
        /*Set cc address*/
        message.CcAddress = CcAddresses;
        /*Set from address*/
        try {
            FromAddressItem selectedFromAddress = from_address_map.get(integer.valueOf(FromAddress));
            message.FromAddress = selectedFromAddress.EmailAddress;
            message.FromName = selectedFromAddress.DisplayName;
        } catch (Exception ex) {}
        message.Incoming = false;
        message.MessageDate = System.now();
        message.ParentId = related_obj_id;
        message.Importance = Importance;
        message.tags = tags;

        //if (TargetName != '' && TargetName != null)
        if (TargetName != '' && TargetName != null && TargetId != '' && TargetId != null) {

            string addresses = '';

            if (eObject.emailIsFromLead) {
                addresses = GetLeadUsingId(TargetId).email;
                if (addresses == null) {
                    addresses = ''; //GetLeadUsingName(TargetName).email;            
                }
            } else if (eObject.emailIsFromContact) {
                addresses = GetContactUsingId(TargetId).email;
                if (addresses == null) {
                    addresses = ''; //GetContactUsingName(TargetName).email;
                }
            }

            if (ToAddresses != '' && addresses != '') {
                addresses = Addresses + SEMI_COLON + ToAddresses;
            } else if (ToAddresses != '' && addresses == '') {
                addresses = ToAddresses + SEMI_COLON;
            } else if (ToAddresses == '' && addresses != '') {
                addresses = addresses + SEMI_COLON;
            }

            message.ToAddress = addresses;
        } else {
            message.ToAddress = ToAddresses;
        }
        message.Subject = Subject;
        message.Name = Name;
        if (EmailHasAttachment()) {
            if (is_rich_text)
                attachmentsString = +HTML_BREAK + HTML_BREAK + 'Attachments:' + attachmentsString;
            else
                attachmentsString = +CR_LF + CR_LF + 'Attachments:' + attachmentsString;
        }
        String truncatedBody = Body;
        if (Body != null && Body.length() > (130 * 1024)) {
            truncatedBody = Body.substring(0, 130 * 1024) + TRUNC_STRING;
        }
        if (is_rich_text) {
            message.HtmlBody = truncatedBody + attachmentsString;
            message.TextBody = Utilities.StripHTMLFromString(message.HtmlBody, true);
        } else {
            message.TextBody = truncatedBody + attachmentsString;
            message.HtmlBody = Utilities.ReplaceCRLFWithHtmlBR(truncatedBody) + attachmentsString;
        }
        message.HasAttachment = EmailHasAttachment();
        message.Headers = emailHeadersAsText;

        return message;
    }
    //Method to Create Related Object from Message Class
    private SObject PopulateRelatedObject(
        EmailMessageInternal message,
        string objectName,
        SObject obj
    ) {
        obj.put('Has_Attachment__c', message.HasAttachment);
        obj.put('Bcc_Address__c', TrimStringToTextFieldLength(objectName, 'Bcc_Address__c', message.BccAddress));
        obj.put('Cc_Address__c', TrimStringToTextFieldLength(objectName, 'Cc_Address__c', message.CcAddress));
        obj.put('Email_Address__c', TrimStringToTextFieldLength(objectName, 'Email_Address__c', message.FromAddress));
        if (message.FromAddress.length() <= 80) {
            obj.put('From_Address__c', TrimStringToTextFieldLength(objectName, 'From_Address__c', message.FromAddress));
        } else {
            obj.put('New_From_Address__c', message.FromAddress);
        }
        obj.put('From_Name__c', TrimStringToTextFieldLength(objectName, 'From_Name__c', message.FromName));
        obj.put('Headers__c', TrimStringToTextFieldLength(objectName, 'Headers__c', message.Headers));
        system.debug('Populate before: ' + message.HtmlBody);
        obj.put('Html_Body__c', TrimStringToTextFieldLength(objectName, 'Html_Body__c', message.HtmlBody));
        system.debug('Populate after: ' + (string) obj.get('Html_Body__c'));
        obj.put('Incoming__c', message.Incoming);
        obj.put('Message_Date__c', message.MessageDate);
        obj.put('To_Address__c', TrimStringToTextFieldLength(objectName, 'To_Address__c', message.ToAddress));
        obj.put('Tags__c', TrimStringToTextFieldLength(objectName, 'Tags__c', message.tags));
        try {
            obj.put('Importance__c', TrimStringToTextFieldLength(objectName, 'Importance__c', message.Importance));

        } catch (exception ex) {}
        //obj.put( 'Message_Id__c', );
        //obj.put( 'Master_Id__c', message.ParentId );

        try {
            obj.put('Owner_Object__c', string.valueOf(message.ParentId).substring(0, 3));
        } catch (exception ex) {}


        //fill To Field to relevant lookup if exists
        /*  Need to Comment it later
            "To" should not take part in any lookup fields. 
            even if email is sent to a contact, "To" is just an address 
            we don't need to 'related' email to that. This means, 
            we will have to take it out later, but for now, 
            we might want to make sure 'Related To' takes precedence.
        */
        string ContactLookupFieldAPI = '';
        try {
            /*if((!IsEmailReply) && (!IsEmailReplyToAll))
            {*/
            //geting resource type from URL
            string rtype = ApexPages.currentPage().getParameters().get('rtype');
            List < String > ContactReferenceFieldList = SfUtilities.getSObjectReferenceFieldINSobject(objectName, rtype);

            system.debug('ContactReferenceFieldList: ' + ContactReferenceFieldList.size());

            if (ContactReferenceFieldList.size() > 0) {

                //string ToId = (TargetName != '' && TargetName != null) ? GetTargetIdUsingName(TargetName) : null ;
                string ToId = (TargetId != '' && TargetId != null) ? TargetId : null;
                if (ToId != null) {
                    ContactLookupFieldAPI = ContactReferenceFieldList[0];
                    obj.put(ContactLookupFieldAPI, ToId);
                }
            }
            /*}*/

        } catch (exception ex) {}
        //Fillup master lookup
        try {
            List < String > ReferenceFieldList = SfUtilities.getSObjectReferenceFieldINSobject(objectName, message.ParentId);

            string ReferenceFieldName = ReferenceFieldList.size() == 0 ? 'Master_Id__c' : ReferenceFieldList[0];
            system.debug('ReferenceFieldName:' + ReferenceFieldName);
            system.debug('message.ParentId' + message.ParentId);
            obj.put(ReferenceFieldName, message.ParentId);

            system.debug('message.parentID: ' + message.ParentId);

        } catch (exception ex) {
            system.debug('exception in master id: ' + ex.getMessage());
        }

        //fill other lookups 
        try {
            system.debug('related to : ' + RelatedtoList);
            for (Relatedto rt: RelatedtoList) {
                //obj.put(SfUtilities.getSObjectReferenceFieldINSobject(objectName , rt.RelatedToSObjectPrefix )[0], rt.RelatedToSObjectId);
                /*if(rt.RelatedToAPIName != ContactLookupFieldAPI) // if contact (To Field) is also filled in avoid overridding it
                {*/ //commented on 7th Sep , Now giving precedence to Related to 
                string relatedAPIName = rt.RelatedToAPIName != null ? rt.RelatedToAPIName : '';
                system.debug(rt.RelatedToSObjectId + 'relatedAPIName:' + relatedAPIName);
                obj.put(relatedAPIName, rt.RelatedToSObjectId);
                /*}*/
            }
        } catch (exception ex) {
            system.debug('exception x2 : ' + ex.getMessage());
        }
        obj.put('Status__c', 'Sent');
        obj.put('Subject__c', TrimStringToTextFieldLength(objectName, 'Subject__c', message.Subject));
        obj.put('Name', TrimStringToTextFieldLength(objectName, 'Name', (message.Name.length() > 80) ? message.Name.substring(0, 80) : message.Name));
        obj.put('Text_Body__c', TrimStringToTextFieldLength(objectName, 'Text_Body__c', message.TextBody));
        system.debug('Obj 1:' + obj);
        return obj;
    }

    //Method to validate Reference and remove invalid
    public string validateReferences(string header_as_text) {
        string valid_reference_header = header_as_text;


        try {
            List < string > valid_reference_list = new List < string > ();

            List < string > refernces_list = header_as_text.split(',');

            if (refernces_list.size() > 0) {
                string regex = '.*@.*';
                Pattern patternObj = Pattern.compile(regex);

                for (string reference_value: refernces_list) {
                    //validate reference value and add to list
                    boolean isMatched = false;

                    Matcher matcher = patternObj.matcher(reference_value);

                    isMatched = matcher.find();

                    if (isMatched) {
                        valid_reference_list.add(reference_value);
                    }
                }

                valid_reference_header = Utilities.listToDelimitedString(',', valid_reference_list);
            }
        } catch (exception e) {
            system.debug('e.getMessage(): ' + e.getMessage());
        }

        return valid_reference_header;
    }

    //Method to extract header value 
    public Map < string, string > getReferencesHeaderValue(string headers_as_text, set < string > headers_to_extract) {
        Map < string, string > header_name_value_map = new Map < string, string > ();

        List < string > header_list = headers_as_text.split('\r\n');

        if (header_list != null && header_list.size() > 0) {
            for (string header: header_list) {
                for (string header_name: headers_to_extract) {
                    if (header.startsWith(header_name)) {
                        string[] header_name_value = header.split(':');

                        if (header_name_value != null && header_name_value.size() > 0) {
                            try {
                                header_name_value_map.put(header_name, header_name_value[1]);
                            } catch (exception e) {
                                system.debug('Error in extracting headers: ' + e.getMessage());
                            }
                        }
                    }
                }
            }
        }

        return header_name_value_map;
    }

    //Method to log Activity even if no who Id and what Id present

    public static string getTaskStatus() {
        string master_label = '';
        List < TaskStatus > obj_task_status_list = Utilities.getTaskStatus();
        if (obj_task_status_list.size() > 0) {
            master_label = obj_task_status_list[0].MasterLabel;
        } else {
            master_label = 'Completed';
        }

        return master_label;
    }

    public static void createTask(string whoID, string WhatId, string priority, string status, string fromAdd, string Addto, string cc, string bcc, string Subject, string body, string attachmentsString) {
        createTask(whoID, WhatId, priority, status, fromAdd, Addto, cc, bcc, Subject, body, attachmentsString, true);
    }

    public static Task createTask(string whoID, string WhatId, string priority, string status, string fromAdd, string Addto, string cc, string bcc, string Subject, string body, string attachmentsString, boolean insert_record) {

        Task temp = new task();
        temp.OwnerId = userinfo.getUserId();
        if (Whoid != Null) {
            temp.WhoId = Whoid;
        }
        if (WhatId != Null) {
            if (WhatId.startswith(LEAD_OBJECT_PREFIX) || WhatId.startswith(CONTACT_OBJECT_PREFIX)) // && temp.WhoId == null )
                temp.WhoId = WhatId;
            else
                temp.WhatId = WhatId;
        }

        temp.Status = status;
        if (Subject.length() > 245)
            temp.Subject = 'Email: ' + Subject.substring(0, 245);
        else
            temp.Subject = 'Email: ' + Subject;
        temp.Type = 'Email';
        temp.Priority = priority;
        temp.ActivityDate = system.today();
        temp.IsVisibleInSelfService = false;
        string description = 'From: ' + fromAdd + '\nAdditional To: ' + Addto + '\n' + 'CC: ' + cc + '\nBCC: ' + bcc + '\n Attachment: ' + attachmentsString + '\n\nSubject: ' + Subject + '\nBody: ' + body;
        try {
            temp.Description = TrimStringToTextFieldLength('Task', 'Description', description);
        } catch (exception ex) {}

        if (insert_record) {
            try {
                ObjectAndFieldAccess.InsertSObject(temp);
            } catch (exception ex) {}
        }

        return (Task) ObjectAndFieldAccess.returnIsAccessible(temp);
    }

    public PageReference Cancel() {
        PageReference result;
        DeleteAllTempAttachments();

        // Set return URL
        if (system.currentpageReference().getparameters().get('retURL') != null)
            result = new PageReference(system.currentpageReference().getparameters().get('retURL'));
        else
            result = new PageReference('/home/home.jsp');

        return result;
    } // Inner classes

    public Boolean isBusinessUnitEnable {
        get {
            return Utilities.isGroupMemberAccessible();
        }
    }
    class FromAddressItem {

        // Constructor for adding contact or user
        public FromAddressItem(string type_In, string emailAddress_In, string displayName_In, Id oweaId_In) {
            AddressType = type_In;
            EmailAddress = emailAddress_In;
            DisplayName = displayName_In;
            OWEAId = oweaId_In;
        }

        // Constructor for adding contact or user
        public FromAddressItem(string type_In, string emailAddress_In, string displayName_In) {
            this(type_In, emailAddress_In, displayName_In, null);
        }

        // Class properties

        public string AddressType {
            get;
            private set;
        }

        public string EmailAddress {
            get;
            private set;
        }

        public string DisplayName {
            get;
            private set;
        }

        public Id OWEAId {
            get;
            private set;
        }
    }

    public class AttachmentListItem {

        // Constructor for adding contact or user
        public AttachmentListItem(id id_In, string name_In, string size_In, string description_In) {
            Id = id_In;
            Name = name_In;
            Size = size_In;
            Description = description_In;
        }

        public id Id {
            get;
            private set;
        }

        public string Name {
            get;
            private set;
        }

        public string Size {
            get;
            private set;
        }

        public string Description {
            get;
            private set;
        }
    }

    public class RelatedTo {
        public integer IdIndex {
            get;
            set;
        }
        public string RelatedToAPIName {
            get;
            set;
        }
        public string RelatedToSobjectPrefix {
            get;
            set;
        }
        public List < SelectOption > RelatedObjectOptions {
            get;
            set;
        }
        public string RelatedToSObjectName {
            get;
            set;
        }
        public string RelatedToSObjectId {
            get;
            set;
        }

        public RelatedTo() {}
        public RelatedTo(Integer IdIndex_IN, List < SelectOption > RelatedObjectOptions_IN, string KeyPrefix) {
            IdIndex = IdIndex_IN;
            RelatedToSobjectPrefix = KeyPrefix;
            RelatedObjectOptions = RelatedObjectOptions_IN;
        }
    }

    class EmailMessageInternal {
        DateTime MessageDate;
        string BccAddress;
        string CcAddress;
        string FromAddress;
        string FromName;
        string ToAddress;
        boolean HasAttachment;
        transient string HtmlBody;
        string Subject;
        transient string TextBody;
        boolean Incoming;
        string Headers;
        Id ParentId;
        string Importance;
        string Name;
        string tags;
        string headersAsText;
        string messageId;
    }

    public string GetOweEmailAddressUsingIdTemp(id idIn) {
        string result = '';
        OrgWideEmailAddress owe = [select Address from OrgWideEmailAddress where id =: idIn];
        if (owe != null)
            result = owe.Address;
        return result;
    }
    public List<Attachment> ProcessAttachments(
    List<Attachment> Attachments ,
    Id parentId 
    )
    {
	    List<Attachment> newEmailAttachments = new List<Attachment>();
	    for (Attachment a : Attachments)
		{
		   	if (parentId != null)
	        {
	          Attachment newAttachment = new Attachment();
	          newAttachment.ParentId = parentId;
	          newAttachment.Name = a.Name;
	          newAttachment.Body = a.Body;
	          newAttachment.ContentType = a.ContentType;
	          newAttachment.Description = a.Description;
	          newEmailAttachments.add( newAttachment );
	        }
		}
		return newEmailAttachments;
    }
    
}